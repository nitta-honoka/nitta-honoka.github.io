<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>honokaのthinking garden</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://honoka.me/"/>
  <updated>2018-03-19T17:21:32.000Z</updated>
  <id>http://honoka.me/</id>
  
  <author>
    <name>honoka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 组件化在业务开发中的落地实践</title>
    <link href="http://honoka.me/2017/10/20/React%20%E7%BB%84%E4%BB%B6%E5%8C%96%E5%9C%A8%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://honoka.me/2017/10/20/React 组件化在业务开发中的落地实践/</id>
    <published>2017-10-19T17:07:25.000Z</published>
    <updated>2018-03-19T17:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>当 React 融入实际业务开发，我们总是会遇见一个纠结的问题，组件如何设计：组件粒度如何控制、组件责任如何划分、组件应如何组合、组件数据如何交互？本文将探索讨论业务组件设计中的方方面面……<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React 作为 Facebook 出品的一个组件化前端框架，已经迅速深入前端开发的各个领域，同时也使组件化开发成为前端开发模式中的一个新常态。</p><p>笔者所在的团队负责开发和维护公司内部的一个 CRM 系统，该系统具有复杂且庞大的业务逻辑。为了提升开发和维护效率，其前端便采用 React 作为视图的主要框架，同时按业务切分为不同组件，使整个应用处于易装配、可追踪、可管控的状态。 </p><p>接下来我们就聊聊该 CRM 系统开发中如何实践组件化开发，真正提升工作效率。</p><h2 id="React-组件设计的重点"><a href="#React-组件设计的重点" class="headerlink" title="React 组件设计的重点"></a>React 组件设计的重点</h2><p>其实关于 React 组件设计的思想，已有官方文档 <sup>[1]</sup> 珠玉在前了，那么在实际运用 React 的过程中，我们又发现了什么值得注意的重点，以及总结出什么适用的解决方案呢？下面就是实际业务开发中会遇见的一些重点和实践。</p><blockquote><p><sup>[1]</sup> 官方文档《Thinking in React》： <a href="https://reactjs.org/docs/thinking-in-react.html" target="_blank" rel="noopener">https://reactjs.org/docs/thinking-in-react.html</a></p></blockquote><h3 id="组件如何划分"><a href="#组件如何划分" class="headerlink" title="组件如何划分"></a>组件如何划分</h3><p>作为一个 to B 的中后台应用，不可避免会与业务模式强绑定，所以我们的路由按照业务模块进行设计与划分，并根据路由划分顶层组件。为了保证顶层组件之间的逻辑是<strong>完全分离</strong>的，设计之初我们便需要与产品方确认每个业务模块的独立性。在这种情况下，我们可以做到能直接从业务模块定位到路由，再到顶层组件，然后一直定位到后端 Controller，都不会出现任何分叉。接下来再对顶层组件进行 UI 为准的子组件划分。   </p><p>可以看出开发中我们采取了两种划分方式，一种以路由为准，划分出顶层组件，更形象的说法应该是业务组件；一种以 UI 为准，划分出展示组件，这样做的好处在于：</p><ol><li><p>开发中针对每个业务模块的规则变动和需求更改是很常见的事。我们可以快速定位到相应模块进行响应。    </p></li><li><p>业务组件由于与业务绑定，因为每个业务模块的隔离性，基本不会存在公用地带；而展示组件则存在很大地抽象为公有组件的空间。如此划分有助于在不断迭代的过程中，整理出那些可以抽象的组件。</p></li><li><p>有助于我们维护一个良好的数据模型，使自己的业务模块和数据模型是相同的信息架构。便于引入 Redux、Mobx 等任何数据管理框架，同时我们可以轻易地将自己的业务组件拆为不同 UI 组件，却不会带来数据模型更改的副作用。 </p></li></ol><p>假设我们有一个 React + Redux 的系统，划分后的应用结构应该会像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── api</span><br><span class="line">│    ├── apiA</span><br><span class="line">│    └── apiB</span><br><span class="line">├── action</span><br><span class="line">│    ├── actionA</span><br><span class="line">│    └── actionB</span><br><span class="line">├── reducer</span><br><span class="line">│    ├── reducerA</span><br><span class="line">│    └── reducerB</span><br><span class="line">├── components</span><br><span class="line">│    ├── ComponentA</span><br><span class="line">│    │    ├── index</span><br><span class="line">│    │    │   // 业务组件，以路由为准，和数据模型保持一致，</span><br><span class="line">│    │    │   // 负责展示组件的组合及状态处理、通信</span><br><span class="line">│    │    │   </span><br><span class="line">│    │    └── other child component </span><br><span class="line">│    │        // 展示组件，以 UI 为标准划分</span><br><span class="line">│    │  </span><br><span class="line">│    └── ComponentB</span><br><span class="line">│         ├── index</span><br><span class="line">│         └── other child component</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><h3 id="组件状态的管理"><a href="#组件状态的管理" class="headerlink" title="组件状态的管理"></a>组件状态的管理</h3><p>React 提供了两个途径获得组件状态，一个是自身管理的 state，另一个是父组件传递下来的 props，那么它们在实践中是如何使用的？</p><h4 id="如何使用-state"><a href="#如何使用-state" class="headerlink" title="如何使用 state"></a>如何使用 state</h4><p>state 管理着组件自身的状态，可以想象成这个组件自身的血液。由于在 React 的更新机制中，state 的每一次改变都会触发组件的重新渲染（re-render），带来不必要的性能损耗。同时 state 中管理太多状态也会造成状态冗余。所以我们应尽量维持组件 stateless 化。在将状态塞进 state 之前都先思考一件事 “这个状态真的适合放进 state 吗？” </p><p>什么数据适合放进 state 呢，总结起来就是<strong>可能会改变 UI 的 flag</strong>。例如一个绑定了 UI 动效的 <code>className</code>，或者一个 JS 动画的判断条件 <code>isButtonDisabled</code>。适合放进 state 的状态通常只会有三种数据类型 <code>Number</code>、<code>String</code> 以及最常出现的 <code>Boolean</code>。  </p><p>所以 state 常见于以下几种场景：</p><ol><li><p>需要进行 UI 展示的更新时，会通过更新组件状态来进行。例如一个按钮，我们要改变其是否可点击的展现状态。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good - 通过状态更新改变组件</span></span><br><span class="line"><span class="keyword">const</span> &#123; disabled &#125; = <span class="keyword">this</span>.state</span><br><span class="line">&lt;button disabeld=&#123;disabled&#125;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good - 直接操作组件</span></span><br><span class="line"><span class="keyword">this</span>.refs.btn.disabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>保存一个条件判断结果。例如可以通过 JSX 条件表达式判断组件是否展示，如下：</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; conditionA, conditionB &#125; = <span class="keyword">this</span>.state</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    conditionA &amp;&amp; ComponentA</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    conditionB ? ComponentB : ComponentC</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>组件内表单内容的存储和变化</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  username: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Input value=&#123;username&#125; onChange=&#123;v =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">username</span>: v&#125;)&#125; /&gt;</span><br><span class="line">  ) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="如何使用-props"><a href="#如何使用-props" class="headerlink" title="如何使用 props"></a>如何使用 props</h4><p>props 可想象成组件外部的输血管，组件会从 props 中取得自己需要的血液。对于子组件来说，父组件传递过来的 props 几乎等于一个黑盒子，子组件只能将手伸进去试着找到自己需要的状态，或者抓出一团 undefined。所以在 props 的使用中，我们需要做两件事来保证自己能更好地取到所需状态。</p><ol><li><p>通过 React 提供的 <code>PropTypes</code> 约定信息的属性名以及类型。如同前后端协作需要先约定好接口文档，通过 <code>PropTypes</code> 我们也可以事先约定好该组件的 “文档”，后续开发就能够一目了然地知道这个业务组件需要什么信息，信息应该是什么样的。</p></li><li><p>定义 <code>props</code> 中传递信息的默认值，增强组件的容错率。当接口请求出现问题的时候，我们也能正常渲染出初始状态的页面。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> PropTypes = &#123; xxx &#125;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123; xxx &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件数据通信"><a href="#组件数据通信" class="headerlink" title="组件数据通信"></a>组件数据通信</h3><p>组件间的数据通信会分两种情况，一种是父子通信，一种是跨组件通信，两种有其不同的处理方法。</p><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>React 提供了 props 以及回调函数来解决父子数据通信的问题，从父组件到子组件当然是通过 props 来传递，只要按照遵循上面所提及的 props 使用建议，已经不会出现太大问题了。不过从子组件到父组件的回调函数通信倒还有可谈的地方。</p><p>回调函数通信是什么呢，先举个简单的例子说明一下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentCom</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 这里通过回调函数 onChange 拿到了子组件传回的状态，并在组件方法中进行处理</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ChildCom onChange=&#123;childState =&gt; <span class="function"><span class="keyword">function</span>(<span class="params">childState</span>)&#125; /&gt; </span></span><br><span class="line"><span class="function">    )</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">ChildCom</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 回调函数通过 props 传给子组件，然后在子组件中调用传回相应状态</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Com onChange=&#123;() =&gt; <span class="keyword">this</span>.props.onChange(childState)&#125; /&gt; </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要注意的是子组件中的回调方法要做到的是通知 “我发生了什么” 而不是通知 “我要干什么”，这意味着你的组件设计得是否足够独立，特别对于抽象出来的公用组件。</p><p>例如一个 <code>Input</code> 组件需要向外部提供填写的文本内容，那么它应该做的是使用 <code>onInputChange</code> 告诉关联的外部，我的文本内容变化了，你们可以通过这个回调方法去取，至于你们要干什么，我并不关心。而不是使用 <code>changeUsername</code> 通知外部拿着文本内容去干某一件具体的事情。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">&lt;Input onChange=&#123;v =&gt; onInputChange(v)&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good</span></span><br><span class="line">&lt;Input onChange=&#123;v =&gt; changeUsername(v)&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="跨组件通信"><a href="#跨组件通信" class="headerlink" title="跨组件通信"></a>跨组件通信</h4><p>开发大型应用的时候我们难免会遇见需要跨组件通信的情况，或者不同业务组件都要用到一套状态（如用户信息等），那么跨组件通信又有哪些方法可以选择呢？</p><ul><li><p>以 Redux 为例的 Flux 单向数据流模式，从统一管理的 Store 一路传递，通过触发更新 Store 的操作来更新</p></li><li><p>通过触发和观察自定义事件（EventEmitter）来传递数据</p></li></ul><p>通常我们还是优先选择 Redux 来进行跨组件的通信和更新，以保证数据流的可观察可追踪，除非对于性能比较敏感的更新（由于 Redux 自顶向下的 <code>re-render</code> 更新机制），可以考虑使用事件传递数据。</p><h2 id="React-组件设计实践的难点"><a href="#React-组件设计实践的难点" class="headerlink" title="React 组件设计实践的难点"></a>React 组件设计实践的难点</h2><p>将 React 应用于系统开发实践中时，为了更高的可维护性及健壮性，提高多人协作的效率，真正发挥 React 的强大威力，那么就有一些坑终究是绕不过去的。</p><h3 id="组件的复用与分治"><a href="#组件的复用与分治" class="headerlink" title="组件的复用与分治"></a>组件的复用与分治</h3><p>遵循着<strong>单一职责化</strong>划分好的组件，总是会被我们赋予更多复用的美好愿景，于是开始努力复用抽象自己的组件，最后发现一些令人头疼的事情。</p><ul><li>组件怎么如此之多调用关系，修改状态牵一发而动全身，影响一大堆父组件。</li><li>组件不太适用最新业务，得加逻辑，结果组件内一长串的为不同业务设计的逻辑。业务改变之后找相应逻辑都得找很久。</li></ul><p>其实在组件化的开发过程中，我们或许更应该注意到组件化带来的另一个重要福利<strong>分治</strong>。 </p><p>例如现在有两个不同业务模型的组件 <code>ComponentA</code> 和 <code>ComponentB</code>，它们都需要在页面上展示列表。接下来，第一反应是不是得设计一个通用的列表组件，传入不同的列表数据 <code>ListA</code> 和 <code>ListB</code> 就好了。但是考虑一下以下情况，<code>ComponentA</code> 和 <code>ComponentB</code> 组件的列表有不同的业务处理规则，要怎么分别处理这些特定于某个业务模型的规则呢。      </p><p>通常的组合方式为直接在业务组件处理好数据再往下传递，负责展示的列表组件就只负责展示，没有任何业务逻辑的处理。也就是说，我们要在业务组件中按照不同业务规则处理好数据，然后传入展示组件做到不同的渲染。但实际开发中业务组件会由很多个子组件组合而成，而每个子组件可能都存在自己专属的业务逻辑，全部放在业务组件中处理极易造成组件的信息冗余。</p><p>想象一下，一个业务组件中有三四个子组件的处理逻1辑，那么我们最少也需要四个方法去干这些事，如果还需要因为业务逻辑的复杂性去拆分方法，是不是已经能看到一个超长代码的组件诞生了。所以这个时候将专属于子组件的业务逻辑放在对应的子组件中是更易维护的选择。</p><p>回到刚刚的情况，两个相似的列表组件却有各自的业务规则怎么处理？我的实践是部分抽象，先抽象出来最常用的基本组件如 <code>Table</code>，然后再分别开发两个业务模型下的列表组件 <code>ListA</code> 和 <code>ListB</code>，它们都用到了 <code>Table</code>。以后其中一个业务规则有变动时，也可以灵活变动相应的列表组件，而无需拓展公用组件，也无需在父组件中寻找列表处理的逻辑在哪儿。</p><h3 id="组件的粒度如何控制"><a href="#组件的粒度如何控制" class="headerlink" title="组件的粒度如何控制"></a>组件的粒度如何控制</h3><p>业务代码中组件抽取的粒度一直是一个比较纠结的问题，粒度太粗项目中可能会存在太多的重复代码，粒度太细会影响后续可扩展性，大部分情况下只能根据实际业务情况进行评估。但是这其中还是有一些经验可以参考：</p><ul><li>组件树的组合不宜过深，通常控制在 3 至 5 层之间比较理想，过深的组件层级容易造成组件通讯的负担。</li><li>有几种东西一般可以被提取为可复用的组件：基础控件、公共样式，以及拥有稳定业务逻辑的组件。</li></ul><h3 id="直接进行-DOM-操作"><a href="#直接进行-DOM-操作" class="headerlink" title="直接进行 DOM 操作"></a>直接进行 DOM 操作</h3><p>需要和其他非 React 架构的系统集成时，如以前和可视化库 ECharts 集成的时候，仍然只能直接进行 DOM 操作，这部分是很难做到完全组件化的，不过我们仍然可以采用更加 React 的方式去操作 DOM（现在已经有 Recharts 这样集成 ECharts 的 React 工具库）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;chart id=<span class="string">'chart'</span> ref=<span class="string">'chart'</span>&gt;&lt;/chart&gt;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> ele = <span class="keyword">this</span>.refs.chart</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">const</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">'chart'</span>)</span><br></pre></td></tr></table></figure><h3 id="避免对状态进行会产生副作用的操作"><a href="#避免对状态进行会产生副作用的操作" class="headerlink" title="避免对状态进行会产生副作用的操作"></a>避免对状态进行会产生副作用的操作</h3><p>开发过程中应尽量保持组件状态的纯净性，始终使用不可变数据的思想进行状态变更，避免在组件逻辑中直接对原数据使用如 <code>pop</code>、<code>push</code>、<code>splice</code> 等会改变原数据的方法。这样会造成数据传递中产生难以观测的改变，后续不便于追踪和管理组件更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> data = [...this.props.data]</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">new</span> = data.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">new</span> = <span class="keyword">this</span>.props.data.pop()</span><br></pre></td></tr></table></figure><h3 id="错误使用-state-的情况"><a href="#错误使用-state-的情况" class="headerlink" title="错误使用 state 的情况"></a>错误使用 state 的情况</h3><p>上面有谈及到 state 的正确使用模式，维护一个<strong>最小集但完备</strong>的 state，回顾以前的代码，常常会出现这么几种错误使用 state 的场景。</p><ul><li><p>将计算后的数据放进 state。这里是非必要的行为，更推荐将计算过程放在 <code>render</code> 生命周期中，直接用计算后的数据进行渲染。如果把计算数据也交给 state 管理，就意味着需要进行许多额外的 <code>setState</code> 操作去保持计算数据的同步。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// 直接在 render 中计算后用于渲染</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params">this.props.xxx</span>)</span></span><br><span class="line"><span class="function">  &lt;<span class="title">Com</span> <span class="title">data</span>=</span>&#123;data&#125; /&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="comment">// 在其它生命周期或者方法中计算后放进 state</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params">this.props.xxx</span>)</span></span><br><span class="line"><span class="function">  <span class="title">this</span>.<span class="title">setState</span>(<span class="params">&#123;data&#125;</span>)</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  &lt;Com data=&#123;data&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同样不推荐将 React 组件直接放进 state，更应直接在 <code>render</code> 生命周期中进行组装。</p></li><li><p>将 props 中已经存在的数据放进 state 通常是一种画蛇添足的行为，直接使用 props 中的数据就好。会导致这个行为的大部分原因在于我们并不清楚 props 中究竟有什么，所以通过 <code>PropTypes</code> 进行 props 的约束说明是一件很有助于减少这类问题的事情。</p></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><img src="https://user-images.githubusercontent.com/9878927/34346337-80fd5f40-ea31-11e7-91a6-01fd8b4daf36.jpg" alt="大象放进冰箱"><br>（图片来源：Pixabay）</p><p>有这么一个有趣的问题 “怎么把大象放进冰箱”，总是会被拿来吐槽一些语焉不详的说明。不过放到应用设计中也能映射出一个道理，解决一个复杂问题的时候，我们总能找到重要的思路，但如何执行却步步维艰。对于业务开发而言，一百个人眼里就有一百种业务逻辑，很难用同一种模式套用到所有业务的设计上。</p><p>但是我们可以通过一些既有的经验举一反三，以此为基础，解决更多特殊化的难题。设计组件的过程就是对整个应用不断拆分再不断组合的过程，在其中我们成长的不仅仅是编码能力，更是全局与局部的规划能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 React 融入实际业务开发，我们总是会遇见一个纠结的问题，组件如何设计：组件粒度如何控制、组件责任如何划分、组件应如何组合、组件数据如何交互？本文将探索讨论业务组件设计中的方方面面……&lt;br&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React" scheme="http://honoka.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>闲谈 git merge 与 git rebase 的区别</title>
    <link href="http://honoka.me/2016/04/28/%E9%97%B2%E8%B0%88%20git%20merge%20%E4%B8%8E%20git%20rebase%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://honoka.me/2016/04/28/闲谈 git merge 与 git rebase 的区别/</id>
    <published>2016-04-28T15:21:36.000Z</published>
    <updated>2016-05-29T05:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信大部分使用 Git 的朋友都会遇见相同的疑问，并且也从网上搜索了不少资料。那么，为什么我还要写这篇文章呢？因为我想尝试从自己的角度解释这个问题，如果能给到大家灵光一闪的感悟，便善莫大焉啦。估计点进来的朋友也对 merge 和 rebase 有了一定了解，所以我也就不浪费篇幅再去详细介绍 merge 和 rebase，让我们直入主题吧。</p><a id="more"></a><h2 id="merge-与-rebase-的区别"><a href="#merge-与-rebase-的区别" class="headerlink" title="merge 与 rebase 的区别"></a>merge 与 rebase 的区别</h2><h3 id="merge-以下说明都基于-merge-的默认操作"><a href="#merge-以下说明都基于-merge-的默认操作" class="headerlink" title="merge(以下说明都基于 merge 的默认操作)"></a>merge(以下说明都基于 merge 的默认操作)</h3><p>现在假设我们有一个主分支 master 及一个开发分支 deve，仓库历史就像这样：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2021.58.22.png" alt="初始仓库历史"></p><p>现在如果在 master 分支上 <code>git merge deve</code>：Git 会自动根据两个分支的共同祖先即 <code>e381a81</code> 这个 commit 和两个分支的最新提交即 <code>8ab7cff</code> 和 <code>696398a</code> 进行一个三方合并，然后将<strong>合并中修改的内容生成一个新的 commit</strong>，即下图的 <code>78941cb</code>。</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.08.28.png" alt="merge 合并图"></p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>rebase 是什么情况呢？还是一个初始的仓库历史图：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.20.15.png" alt="rebase初始仓库历史"></p><p>如果是在 master 分支上 <code>git rebase deve</code>：Git 会从两个分支的共同祖先 <code>3311ba0</code> 开始提取 master 分支（当前所在分支）上的修改，即 <code>85841be</code>、<code>a016f64</code> 与 <code>e53ec51</code>，再将 master 分支指向 deve 的最新提交（目标分支）即 <code>35b6708</code> 处，然后将刚刚提取的修改依次应用到这个最新提交后面。操作会舍弃 master 分支上提取的 commit，同时<strong>不会像 merge 一样生成一个合并修改内容的 commit，相当于把 master 分支（当前所在分支）上的修改在 deve 分支（目标分支）上原样复制了一遍</strong>,操作完成后的版本历史就像这样：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.26.23.png" alt="rebase 合并图"></p><p>可以看见 master 分支从 deve 分支最新提交 <code>35b6708</code> 开始依次提交了自己的三个 commit（由于是提取修改后重新依次提交，故 commit 的 hash 码与上面的<code>85841be</code>、<code>a016f64</code>、<code>e53ec51</code> 不同）。</p><h3 id="rebase-i"><a href="#rebase-i" class="headerlink" title="rebase -i"></a>rebase -i</h3><p>rebase 操作加上 <code>-i</code> 选项可以更直观的看见被提取的 commit 信息。</p><p>仍然在 master 分支上 rebase deve 分支，不过这次要加上 <code>-i</code> 选项，即 <code>git rebase -i deve</code>，然后我们可以得到这样一个文本信息框</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/C48C3A61-64FD-4BD5-BD42-2CBF11937B4F.png" alt="rebase -i信息"></p><ul><li>A 区域内的信息说明了这次 rebase 操作提取了哪些 commit 记录（<code>f9a7673</code> 与 <code>edb2ba2</code>），会连接到目标分支的哪个 commit （<code>9c86a5c</code>）后面。可以根据 B 区域中的命令说明修改 <code>pick</code> 为其他命令，对该次提取出来的 commit 做额外的操作</li><li>B 区域内说明了本次 rebase 操作可以选用的命令</li><li>通过 <code>:wq</code> 保存退出后，就会按照刚刚在 A 区域内设定的命令处理 commit 并 rebase。</li></ul><h3 id="冲突处理策略的不同"><a href="#冲突处理策略的不同" class="headerlink" title="冲突处理策略的不同"></a>冲突处理策略的不同</h3><ul><li>merge 遇见冲突后会直接停止，等待手动解决冲突并重新提交 commit 后，才能再次 merge</li><li>rebase 遇见冲突后会暂停当前操作，开发者可以选择手动解决冲突，然后 <code>git rebase --continue</code> 继续，或者 <code>--skip</code> 跳过（注意此操作中当前分支的修改会直接覆盖目标分支的冲突部分），亦或者 <code>--abort</code> 直接停止该次 rebase 操作</li></ul><h2 id="总结：选择-merge-还是-rebase？"><a href="#总结：选择-merge-还是-rebase？" class="headerlink" title="总结：选择 merge 还是 rebase？"></a>总结：选择 merge 还是 rebase？</h2><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定。但是在大部分情况下，个人建议使用 rebase + merge –ff-only 的组合，这样可以使整个版本历史更加简洁，在大型项目中的效果可以参考 GO 的版本历史。</li><li>merge 和 rebase 还有很多强大的选项，可以使用 <code>git help &lt;command&gt;</code> 查看</li></ul><h2 id="最后：一些注意点"><a href="#最后：一些注意点" class="headerlink" title="最后：一些注意点"></a>最后：一些注意点</h2><ul><li>使用 merge 时应考虑采用默认操作，还是 <code>--no-ff</code> 或 <code>--ff-only</code> 的方式</li><li>rebase 操作会丢弃当前分支已提交的 commit，故不要在已经 push 到远程，和其他人正在协作开发的分支上执行 rebase 操作</li><li>与远程仓库同步时，使用 pull 命令默认进行了 <code>git fetch + git merge</code> 两个操作，可以通过加上 <code>--rebase</code> 命令将 fetch 后的 merge 操作改为 rebase 操作，或者仅仅 ‘git fetch remoteName’,然后才思考采取哪种整合策略 <code>git merge(or rebase) origin/master</code></li><li>开发与 commit 时注意自己此时在哪个分支上</li><li>当有修改未 commit 时，不能进行 rebase 操作，此时可以考虑先用 <code>git stash</code> 命令暂存</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">ProGit 2nd Edition</a></li><li><a href="http://stackoverflow.com/questions/28140434/is-there-a-difference-between-git-rebase-and-git-merge-ff-only" target="_blank" rel="noopener">Stackoverflow:Is there a difference between git rebase and git merge –ff-only</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大部分使用 Git 的朋友都会遇见相同的疑问，并且也从网上搜索了不少资料。那么，为什么我还要写这篇文章呢？因为我想尝试从自己的角度解释这个问题，如果能给到大家灵光一闪的感悟，便善莫大焉啦。估计点进来的朋友也对 merge 和 rebase 有了一定了解，所以我也就不浪费篇幅再去详细介绍 merge 和 rebase，让我们直入主题吧。&lt;/p&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://honoka.me/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://honoka.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局实例系列（四）如何实现容器中每一行的子容器数量随着浏览器宽度的变化而变化？</title>
    <link href="http://honoka.me/2016/01/28/CSS%E5%B8%83%E5%B1%80%E5%AE%9E%E4%BE%8B%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%AF%8F%E4%B8%80%E8%A1%8C%E7%9A%84%E5%AD%90%E5%AE%B9%E5%99%A8%E6%95%B0%E9%87%8F%E9%9A%8F%E7%9D%80%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%BD%E5%BA%A6%E7%9A%84%E5%8F%98%E5%8C%96%E8%80%8C%E5%8F%98%E5%8C%96%EF%BC%9F/"/>
    <id>http://honoka.me/2016/01/28/CSS布局实例系列（四）如何实现容器中每一行的子容器数量随着浏览器宽度的变化而变化？/</id>
    <published>2016-01-27T17:08:46.000Z</published>
    <updated>2018-04-16T17:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello，小朋友们，还记得我是谁吗？对了，我就是~超威~好啦，言归正传，今天的布局实例是：</p><blockquote><p>实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化</p></blockquote><p>肯定有人心里犯嘀咕了，哈~这么简单，不就是全部左浮动嘛，这也好意思拿出来讲？别急啊，其实里面的坑还是挺多的，且待我一个个填上。<br><a id="more"></a></p><p>要实现什么样的效果呢，如图：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/css4-01.jpg" alt=""><br><img src="http://7xinvi.com1.z0.glb.clouddn.com/css4-02.jpg" alt=""></p><h3 id="通过左浮动实现"><a href="#通过左浮动实现" class="headerlink" title="通过左浮动实现"></a>通过左浮动实现</h3><ol><li><p>要实现这样一个布局，我们首先需要如下的 HTML：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"float-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-element"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后开始写 CSS 吧：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#float-container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float-element</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使每个小容器向左浮动，再设定一个边距，一个根据浏览器宽度自适应变化位置的浮动布局就搞定收工了？当然不会，效果会像这样：</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/css4-03.png" alt="error-float"></p></li><li><p>说好的红色背景大容器呢，怎么躲起来啦？检查一番，原来是忘了给大容器 div 设定宽高度了，那就设定一下宽高度。既然要求了大容器自适应，那么我们就分别设定为 100% 吧：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#float-container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float-element</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 好啦，刷新一下。大容器咋还是没出来？</p></li><li><p>现在让我们分析一下吧：</p><ul><li><p>为何看不见大容器？</p><p>  因为 div 如果没有包裹元素的话，百分比宽高度是不会产生效果的。</p></li><li><p>那么为什么大容器明明包裹着九个 div，百分比宽高度却没有产生效果呢？</p><p>  因为小容器都设定为左浮动，已经脱离文档流，大容器并没有包围小容器，表现出高度为0（高度塌陷）。</p></li><li><p>接下来我们想要大容器自适应，又不想使小容器失去浮动的特性，能够随着宽度变化自动调整每一行的个数，应该怎么办？</p><p>  我们需要闭合浮动元素，使其包含框表现出正常的高度。是时候请出我们的 BFC 大神啦，对，我已经连续三篇实例博文提到 BFC 原理了，因为这个原理就是这么有用啊（该处原理的详细介绍请参考一丝大神的<a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">《那些年我们一起清除过的浮动》</a>）。现在我们在大容器加上 <code>overflow: hidden;</code> 就可以自动清理其包含的任何浮动元素，接下来看看最终的 DEMO，试着调整一下宽度，是不是已经实现了想要的效果？</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="pgVomb" data-default-tab="html,result" data-user="honoka" data-embed-version="2" data-pen-title="float-container" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/pgVomb/" target="_blank" rel="noopener">float-container</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul></li></ol><h3 id="通过-inline-block-实现"><a href="#通过-inline-block-实现" class="headerlink" title="通过 inline-block 实现"></a>通过 inline-block 实现</h3><p>只能通过左浮动完成这个实例？并不是，我们还有 inline-block。inline-block 可以像行内元素一样水平地依次排列，但框的内容仍然符合块级框的行为。通过这一特性，我们可以利用 inline-block 像浮动一样创建很多网格铺满容器，并且不需要清除浮动。当然整个布局过程也比左浮动简便了一些，如下面的 DEMO：</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="WrJvwd" data-default-tab="html,result" data-user="honoka" data-embed-version="2" data-pen-title="inline-block-container" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/WrJvwd/" target="_blank" rel="noopener">inline-block-container</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>其实还有更加简便的方案，使用 <code>flex</code>，这里提供一个思路给大家看看如何实现（笑）</p><p>最后感谢大家的阅读，欢迎前往我的 <a href="https://github.com/nitta-honoka/baiduIFE_practice/tree/master/2015_spring/Intermediate/task0001" target="_blank" rel="noopener">repo</a> 查看源代码整理，有任何问题也请尽情向我吐槽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello，小朋友们，还记得我是谁吗？对了，我就是~超威~好啦，言归正传，今天的布局实例是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;肯定有人心里犯嘀咕了，哈~这么简单，不就是全部左浮动嘛，这也好意思拿出来讲？别急啊，其实里面的坑还是挺多的，且待我一个个填上。&lt;br&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://honoka.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局实例系列（三）也聊聊双飞翼，如何实现一个左右宽度固定，中间自适应的三列布局</title>
    <link href="http://honoka.me/2016/01/27/CSS%E5%B8%83%E5%B1%80%E5%AE%9E%E4%BE%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%9F%E8%81%8A%E8%81%8A%E5%8F%8C%E9%A3%9E%E7%BF%BC%EF%BC%8C%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B7%A6%E5%8F%B3%E5%AE%BD%E5%BA%A6%E5%9B%BA%E5%AE%9A%EF%BC%8C%E4%B8%AD%E9%97%B4%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80/"/>
    <id>http://honoka.me/2016/01/27/CSS布局实例系列（三）也聊聊双飞翼，如何实现一个左右宽度固定，中间自适应的三列布局/</id>
    <published>2016-01-26T16:50:15.000Z</published>
    <updated>2018-04-16T17:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天聊聊一个经典的布局实例：</p><blockquote><p>实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化</p></blockquote><p>可能很多朋友已经笑了，这玩意儿通过双飞翼布局就能轻松实现。不过，还请容我在双飞翼之外，循序渐进地介绍一下我们可以如何实现一个三列布局。</p><a id="more"></a><h3 id="首先，使用浮动布局来实现"><a href="#首先，使用浮动布局来实现" class="headerlink" title="首先，使用浮动布局来实现"></a>首先，使用浮动布局来实现</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="MKVMoa" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="float-three-column" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/MKVMoa/" target="_blank" rel="noopener">float-three-column</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><ul><li>左侧元素与右侧元素优先渲染，分别向左和向右浮动</li><li>中间元素在文档流的最后渲染，并将 width 设为 100%，则会自动插入到左右两列元素的中间，随后设置 margin 左右边距分别为左右两列的宽度，将中间元素调整到正确的位置。</li></ul><p>这是一种比较便利的实现方式，无需额外的元素辅助定位，同时兼容性也比较优秀。但有一个缺点就是该布局方式只能实现左右两列宽度固定，中间自适应这一种三列布局，灵活性不强。</p><h3 id="其实，也可以试试利用-BFC"><a href="#其实，也可以试试利用-BFC" class="headerlink" title="其实，也可以试试利用 BFC"></a>其实，也可以试试利用 BFC</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="vLRRPv" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="bfc-three-columns" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/vLRRPv/" target="_blank" rel="noopener">bfc-three-columns</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>之前的文章《CSS 布局实例系列（二）如何通过 CSS 实现一个左边固定宽度、右边自适应的两列布局》已经谈到了利用 BFC 原理实现多列布局的方法。BFC 元素不会与浮动元素叠加，自然也可以完成这个实例。</p><ul><li>同样的左右两列元素优先渲染，并分别左右浮动。</li><li>接下来将中间元素设置 overflow: hidden; 成为 BFC 元素块，不与两侧浮动元素叠加，则自然能够插入自己的位置啦。</li></ul><h3 id="接下来就尝试一下大名鼎鼎的双飞翼布局"><a href="#接下来就尝试一下大名鼎鼎的双飞翼布局" class="headerlink" title="接下来就尝试一下大名鼎鼎的双飞翼布局"></a>接下来就尝试一下大名鼎鼎的双飞翼布局</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="rxdpJK" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="grid-three-columns" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/rxdpJK/" target="_blank" rel="noopener">grid-three-columns</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>双飞翼是由淘宝玉伯等前端大牛提出的一种多列布局方法，主要利用了浮动、负边距、相对定位三个布局属性，使三列布局就像小鸟一样，拥有中间的身体和两侧的翅膀。</p><p>接下来就简单介绍一下双飞翼的实现过程：</p><ol><li><p>假设我们现在需要一个如实例说明一样的三列布局，写出如下 div 结构：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-middle-02"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>div-middle<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-left-02"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>div-left<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-right-02"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>div-right<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>首先我们将中间元素放在文档流最前面优先渲染，然后使其向左浮动，并设置 width 为 100%：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div-middle-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff9ca</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 中间元素直接占满全列，形成小鸟的身体。</p></li><li><p>接下来我们开始为小鸟加上双翼，将左右两列元素均设为左浮动，然后通过调整负边距将其定位在各自的位置上：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div-middle-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff9ca</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div-left-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div-right-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 看起来，双翼安装成功啦。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/css3-01.png" alt=""></p></li><li><p>这样三列布局就大功告成了？No，no，no，仔细看看上面的效果图，可以发现 div-middle 的字块消失了。这是因为通过负边距调整浮动元素位置时，会产生层叠的效果，上面的布局其实只是左右两列元素分别定位在自己的位置上并覆盖中间元素的那部分而已，中间元素的定位并未成功。中间元素要怎样定位在自己的位置上呢？小鸟的身体不是还缺少骨架嘛，那么我们在小鸟体内加上骨架吧：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-middle-02"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle-wrap-02"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>div-middle<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在中间元素中再增加一层包裹，通过这层骨架我们就可以方便地控制小鸟身体的位置啦，方法就是调整骨架的左右边距，使其分别等于左右两列的宽度：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div-middle-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff9ca</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#middle-wrap-02</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-left-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-right-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 好啦，一个左右定宽，中间自适应的三列布局以双飞翼的方式成功完成。</p></li><li><p>总结整个过程，就是先放好身体，再加上翅膀，然后让身体包裹一层骨架，通过骨架将身体定位到正确的位置。这就是双飞翼布局的完全体吗？当然不是，接下来我们要请出大杀器相对布局啦，就像小鸟可以通过各种不同的姿势飞翔一般，通过 <code>position: relative;</code> 双飞翼可以实现任意的三列或双列布局。本实例加上相对定位，便成为了这样的完全体：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div-middle-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff9ca</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#middle-wrap-02</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-left-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-right-02</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双飞翼能够兼容到 IE6，其可以实现的各种布局在此便不作展开了，有兴趣可以参考玉伯分享的 <a href="http://www.dqqd.me/avatar/fly/grids_test1.html" target="_blank" rel="noopener">DEMO</a></p></li></ol><h3 id="跟上潮流，试试-flex"><a href="#跟上潮流，试试-flex" class="headerlink" title="跟上潮流，试试 flex"></a>跟上潮流，试试 flex</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="zrWRzg" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="flex-three-columns" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/zrWRzg/" target="_blank" rel="noopener">flex-three-columns</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>看完了强大的双飞翼布局，是不是已经心急火燎，想亲手试试啦。别急，客官，再听我唠唠 CSS3 的新布局 flex 呗。先让我说明一下上面的 DEMO 中是怎样实现本次实例的：</p><ol><li>设计一个弹性容器包裹需定位的三个元素，然后将该弹性容器的排列属性设为水平排列（flex-flow: row）</li><li><p>现在三个元素已经是三列布局了，再将三列元素分别设定一下宽度就行了，左右元素设定为定宽，自适应的中间元素设定为 100%。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-left-03</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-middle-03</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff9ca</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div-right-03</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>搞定收工！大哥你瞪着我是怎么回事儿？~ 什么？效果不对？我的代码怎么可能不对？！哎呦，别打我，我马上检查[捂脸]好吧，宽度不对，左右两侧的宽度均不符合设定的定值。什么情况呢？原来在 flex 布局中不能将被定位的元素宽度或高度设定为 100%，这样会影响其他定值大小的元素。那么该如何设置中间元素的宽度呢，<code>flex: 1;</code> 即可，可以试一下 DEMO 中去掉注释与不去掉的区别。</p></li><li><p>最后简单介绍一下 flex：flex 是 CSS3 的一种弹性容器布局，通过 flex，几行简单的 CSS 语句便可以实现各种布局（对！我就是 flex NC粉~被拍飞~）。那么 flex 有什么缺点呢？兼容性！</p></li><li><p>所以在使用 flex 的时候还请注意是否兼容当前浏览器，是否需要 -webkit- 标签。flex 的具体语法和各类实例因为篇(lan)幅(de)过(xie)多的原因，也不做过多介绍了，可以参考阮一峰老师的博文：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇</a></li></ul></li></ol><p>最后感谢大家的阅读，欢迎前往我的 <a href="https://github.com/nitta-honoka/baiduIFE_practice/tree/master/2015_spring/Intermediate/task0001" target="_blank" rel="noopener">repo</a> 查看源代码整理，有任何问题也请尽情向我吐槽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天聊聊一个经典的布局实例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能很多朋友已经笑了，这玩意儿通过双飞翼布局就能轻松实现。不过，还请容我在双飞翼之外，循序渐进地介绍一下我们可以如何实现一个三列布局。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://honoka.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局实例系列（二）如何通过 CSS 实现一个左边固定宽度，右边自适应的两列布局</title>
    <link href="http://honoka.me/2016/01/24/CSS%E5%B8%83%E5%B1%80%E5%AE%9E%E4%BE%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87CSS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%E5%AE%BD%E5%BA%A6%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80/"/>
    <id>http://honoka.me/2016/01/24/CSS布局实例系列（二）如何通过CSS实现一个左边固定宽度，右边自适应的两列布局/</id>
    <published>2016-01-23T16:41:42.000Z</published>
    <updated>2018-04-16T17:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在百度 IFE 训练营中看见的一道题目：</p><blockquote><p>用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化</p></blockquote><p>聊聊相应的实现思路<br><a id="more"></a></p><h3 id="通过绝对定位实现"><a href="#通过绝对定位实现" class="headerlink" title="通过绝对定位实现"></a>通过绝对定位实现</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="ZQrMXR" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="absolute-two-column" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/ZQrMXR/" target="_blank" rel="noopener">absolute-two-column</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script> <p>注意点如下：</p><ul><li>需要套一个相对定位的父元素</li><li>div-a 绝对定位，并将位置调整为浏览器左上角</li><li>div-b <code>margin-left</code> 属性值为 div-a 的宽度（因为 div-a 绝对定位已经脱离文档流，故不设定为 div-a 宽度的话，会相互覆盖）</li><li>div-c 绝对定位并将位置调整为正下方</li><li>需要自适应的 div 均设定宽度为100% </li></ul><h3 id="通过浮动实现"><a href="#通过浮动实现" class="headerlink" title="通过浮动实现"></a>通过浮动实现</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="PZQdEG" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="float-two-column" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/PZQdEG/" target="_blank" rel="noopener">float-two-column</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>注意点如下：</p><ul><li>div-a 设定为左浮动</li><li>div-b 与上面一样需要将 <code>margin-left</code> 属性值设为 div-a 的宽度，原因同上，浮动也会脱离文档流</li><li>div-c 最好清除浮动，避免浮动的影响</li></ul><h3 id="通过-BFC-规则实现"><a href="#通过-BFC-规则实现" class="headerlink" title="通过 BFC 规则实现"></a>通过 BFC 规则实现</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="JGpapq" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="bfc-two-column" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/JGpapq/" target="_blank" rel="noopener">bfc-two-column</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>此处便不花大量篇幅介绍 BFC 了，可以参见下面两篇博文：</p><ul><li><a href="http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html" target="_blank" rel="noopener">深入理解BFC和Margin Collapse</a></li><li><a href="http://www.html-js.com/article/1866" target="_blank" rel="noopener">CSS之BFC详解</a></li></ul><p>简而言之，BFC 可以帮助我们解决布局中左边元素脱离文档流后，右边元素的左外边距会触碰到包含块容器的左外边框的问题，就像下图：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/css2.png" alt=""></p><p>现在我们仅需注意将 div-b 设定为 BFC 元素即可。</p><p>以上便是个人总结出的三种两列布局方法，源代码已同步至个人 <a href="https://github.com/nitta-honoka/baiduIFE_practice/tree/master/2015_spring/Intermediate/task0001" target="_blank" rel="noopener">repo</a>，欢迎参考交流（笑）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在百度 IFE 训练营中看见的一道题目：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;聊聊相应的实现思路&lt;br&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://honoka.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 布局实例系列（一）总结 CSS 居中的多种方法</title>
    <link href="http://honoka.me/2016/01/21/CSS%E5%B8%83%E5%B1%80%E5%AE%9E%E4%BE%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E6%80%BB%E7%BB%93CSS%E5%B1%85%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://honoka.me/2016/01/21/CSS布局实例系列（一）总结CSS居中的多种方法/</id>
    <published>2016-01-20T16:30:33.000Z</published>
    <updated>2018-04-16T17:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 CSS 让页面元素居中可能是我们页面开发中最常见的拦路虎啦，接下来总结一下常见的几种居中方法吧。</p><a id="more"></a><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ol><li><p><code>text-align</code> 与 <code>inline-block</code> 的配合</p><p> </p><p data-height="265" data-theme-id="0" data-slug-hash="mVpVEr" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="mVpVEr" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/mVpVEr/" target="_blank" rel="noopener">mVpVEr</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p> HTML 中在想要居中的元素外面套了一个父元素，然后在 CSS 中将父元素的 <code>text-align</code> 属性设为 center，接下来将子元素的 <code>display</code> 属性设为 inline-block 就可以水平居中了。</p></li><li><p>通过 <code>margin</code> 实现</p><p> </p><p data-height="265" data-theme-id="0" data-slug-hash="rxpxmR" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="rxpxmR" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/rxpxmR/" target="_blank" rel="noopener">rxpxmR</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p> 通过 <code>margin</code> 实现连父元素都不用套了，直接 <code>margin: 0 auto;</code> 搞定，对，就是这么简单快捷，恐怕是居中最常用的方法了吧。</p></li></ol><p>好啦，现在老板表示只是水平居中不行，还得垂直居中，该怎么办呢？</p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ol><li><p>还是先用 <code>margin</code> 来实现绝对定位元素的水平垂直居中吧</p><p> </p><p data-height="265" data-theme-id="0" data-slug-hash="NxXxBz" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="NxXxBz" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/NxXxBz/" target="_blank" rel="noopener">NxXxBz</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p> 注意代码中的几个关键点：</p><ul><li>子元素 div 绝对定位</li><li>父元素需要被定位</li><li>子元素 top、bottom、left、right 四个位置值均为 0</li><li>子元素 margin: auto;<br></li></ul></li><li><p>接下来使用来自 CSS3 的新杀器 <code>flex</code></p><p> </p><p data-height="265" data-theme-id="0" data-slug-hash="xZpZMw" data-default-tab="css,result" data-user="honoka" data-embed-version="2" data-pen-title="xZpZMw" class="codepen">See the Pen <a href="https://codepen.io/honoka/pen/xZpZMw/" target="_blank" rel="noopener">xZpZMw</a> by xal821792703 (<a href="https://codepen.io/honoka" target="_blank" rel="noopener">@honoka</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p> 使用 <code>flex</code> 容器布局实现水平垂直居中的关键点在于：</p><ul><li>父元素 display 属性设为 flex</li><li>垂直布局的属性是 align-items，设为 center 时便垂直居中</li><li>水平布局的属性是 justify-content，设为 center 时水平居中</li><li><p>子元素弹性居中，增加子元素也不会有影响</p><p>另外请注意兼容性问题，见下图：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/flex-support.png" alt="flex 兼容性"></p></li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实利用 CSS 实现居中还有许多方法我没有写在博文中，如何选择居中的技术方案，最后还是得取决于当前业务场景下的浏览器支持程度和适合度。顺带一提个人最喜欢使用的是 <code>flex</code> 方案。</p><p>源代码已同步至个人 <a href="https://github.com/nitta-honoka/baiduIFE_practice/tree/master/2015_spring/Intermediate/task0001" target="_blank" rel="noopener">repo</a>，欢迎参考交流（笑）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 CSS 让页面元素居中可能是我们页面开发中最常见的拦路虎啦，接下来总结一下常见的几种居中方法吧。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://honoka.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中 onload 事件绑定多个方法的优化建议</title>
    <link href="http://honoka.me/2015/10/17/JavaScript%E4%B8%ADonload%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%A4%9A%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/"/>
    <id>http://honoka.me/2015/10/17/JavaScript中onload事件绑定多个方法的优化建议/</id>
    <published>2015-10-16T16:02:30.000Z</published>
    <updated>2018-04-16T16:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>onload 事件中多个方法处理的优化方案</p><a id="more"></a><p>页面加载完毕时会触发 onload 事件。基于内容（HTML）要与行为（JavaScript）分离的编码思想，我们需要将一些对页面的初始化操作写在方法内，并通过 <code>window.onload = functionName</code> 调用这些方法.</p><p>需要调用多个方法时，若使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = functionA;</span><br><span class="line"><span class="built_in">window</span>.onload = functionB;</span><br></pre></td></tr></table></figure><p>它们之中只有最后一个方法会被实际调用。那么应如何实现调用多个方法呢？</p><ol><li><p>直接在 HTML 中编写:</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"functionA();functionB()"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>由于事件包含在 HTML 内，不符合上述『内容与行为分离』的思想，故不推荐使用这个方法。</p><ol><li><p>创建一个匿名函数容纳需要调用的方法，然后将该匿名函数绑定到 onload 事件上：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  functionA();</span><br><span class="line">  functionB();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在需要调用的函数不是太多的时候，这是最简单的解决方案了。</p><ol><li><p>当需要调用的方法较多时，我们可以进一步优化，编写一个专门用于绑定 onload 事件的方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//把现有的 window.onload 事件处理函数的值存入变量</span></span><br><span class="line">   <span class="keyword">var</span> oldOnload = <span class="built_in">window</span>.onload;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">"function"</span>) &#123;</span><br><span class="line">     <span class="comment">//如果这个处理函数还没有绑定任何函数，就像平时那样添加新函数</span></span><br><span class="line">     <span class="built_in">window</span>.onload = func;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//如果处理函数已经绑定了一些函数，就把新函数添加到末尾</span></span><br><span class="line">     <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       oldOnload();</span><br><span class="line">       func();</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//接下来，我们只需要调用这个方法添加自己需要的函数就行了</span></span><br><span class="line"> addLoadEvent(functionA);</span><br><span class="line"> addLoadEvent(functionB);</span><br></pre></td></tr></table></figure></li></ol><p>现在不管代码变得多么复杂，当我们需要在页面加载完毕时调用多少函数，只需要多写一条语句既可解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;onload 事件中多个方法处理的优化方案&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://honoka.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Github 恶搞教程（一起『玩坏』自己的 Github 吧）</title>
    <link href="http://honoka.me/2015/10/10/Github%E6%81%B6%E6%90%9E%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E8%B5%B7%E3%80%8E%E7%8E%A9%E5%9D%8F%E3%80%8F%E8%87%AA%E5%B7%B1%E7%9A%84Github%EF%BC%89/"/>
    <id>http://honoka.me/2015/10/10/Github恶搞教程（一起『玩坏』自己的Github）/</id>
    <published>2015-10-09T16:14:13.000Z</published>
    <updated>2018-04-16T17:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在伯乐在线读到一篇趣文，<a href="http://blog.jobbole.com/48809/" target="_blank" rel="noopener">《如何在 Github『正确』做贡献》</a>，里面各种能人恶搞 Github 的『Public contributions』，下面截取几个小伙伴的战绩：</p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-1.jpg" alt="fun1"></p><p><img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-2.jpg" alt="fun2"></p><p>顺藤摸瓜，发现原来有人已经做出『玩坏』Github 的工具啦，名叫 <a href="https://github.com/gelstudios/gitfiti" target="_blank" rel="noopener">gitfiti</a>。主要对应预先定义的模板，进行相应日期的 commit 操作，push 至 Github 后在贡献栏中生成相应像素点，并且利用 Github 贡献数不同颜色深度不同的机制，就可以在自己的贡献栏里面看见像素画了。怎么样，是不是心动啦，那么下面就让我们开始『玩坏』之旅吧。</p><a id="more"></a><ol><li><p>首先得将插件下载到本地，有 Git 经验的朋友可以直接 clone 这个 repo</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:gelstudios/gitfiti.git</span><br></pre></td></tr></table></figure><p> 或者点击 Github 页面的下载链接将整个项目下载到本地</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-3.png" alt="download"></p></li><li><p>下载的同时在自己的 Github 中创建一个新的 repo，名字自取，不要创建 license 和 readme（防止后面 push 的时候产生冲突）。</p></li><li><p>下载到本地后在命令行中运行 gitfiti.py，显出欢迎界面，此时第一条交互信息不用填写什么内容，直接回车即可。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-4.png" alt=""></p></li><li><p>接着输入自己的 Github 用户名和刚刚新建的 repo 名。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-5.png" alt=""></p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-6.png" alt=""></p></li><li><p>然后选择从哪里开始绘图，输入一个数字，代表从贡献栏的第几周开始（从左开始数），如果此处不输入直接回车则默认从最左边开始。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-7.png" alt=""></p></li><li><p>接下来会提醒你，对比你已有的贡献后，一天中最大的贡献数是多少，然后让你选择本次绘图生成的像素点的最大贡献数（Github 的像素块颜色机制为贡献相对越大的那天颜色越深）。建议此处直接使用自己的最大贡献数，否则自己之前的贡献就全部变成浅绿了。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-8.png" alt=""></p><p> 此处输入 gitfiti 就表示使用自己的最大贡献数。</p></li><li><p>然后就可以选择绘图模板了，此处可以使用自定义模板或者开发者已经设定好的模板。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-9.png" alt=""></p><p> 要使用自定义模板就在上面那一行中输入模板的文件路径，自定义模板的方法可以参见<a href="https://github.com/gelstudios/gitfiti" target="_blank" rel="noopener">该项目的说明页</a>。如果使用开发者设定的模板，上面一行就直接回车，然后下面选择模板，输入心仪的模板名字（模板名对应图案效果同样参见项目说明页）。</p></li><li><p>一切搞定后，项目会自动生成一个 shell 脚本 gitfiti.sh，接下来运行这个脚本便可以自动commit 并 push 至你新建的那个 repo，等待一段时间，你便能在自己的贡献栏看见有趣的像素画啦。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-10.png" alt=""></p><p> <strong>注意</strong>：此处可能会遇见两个问题</p><ul><li>生成的 shell 脚本没有运行权限。直接运行一下 <code>chmod 777 gitfiti.sh</code> 即可。</li><li><p>push 不成功，一般是因为新 repo 里面已经有文件，push 产生冲突。可以打开 gitfiti.sh，修改最后一行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master //改为下面这行</span><br><span class="line">git push -f -u origin master //如果有冲突强制合并</span><br></pre></td></tr></table></figure></li></ul></li><li><p>晒晒自己的战果（这次『恶搞』生成了 4W+ 的贡献o(╯□╰)o），也欢迎来我的 Github 看看。</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/gitfun-11.png" alt=""></p></li><li><p>最后如果想取消这个效果，直接删除创建的 repo，贡献栏和贡献数就会回归正常。</p></li></ol><p>祝大家玩得愉快！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在伯乐在线读到一篇趣文，&lt;a href=&quot;http://blog.jobbole.com/48809/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《如何在 Github『正确』做贡献》&lt;/a&gt;，里面各种能人恶搞 Github 的『Public contributions』，下面截取几个小伙伴的战绩：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/gitfun-1.jpg&quot; alt=&quot;fun1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/gitfun-2.jpg&quot; alt=&quot;fun2&quot;&gt;&lt;/p&gt;
&lt;p&gt;顺藤摸瓜，发现原来有人已经做出『玩坏』Github 的工具啦，名叫 &lt;a href=&quot;https://github.com/gelstudios/gitfiti&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gitfiti&lt;/a&gt;。主要对应预先定义的模板，进行相应日期的 commit 操作，push 至 Github 后在贡献栏中生成相应像素点，并且利用 Github 贡献数不同颜色深度不同的机制，就可以在自己的贡献栏里面看见像素画了。怎么样，是不是心动啦，那么下面就让我们开始『玩坏』之旅吧。&lt;/p&gt;
    
    </summary>
    
      <category term="趣味生活" scheme="http://honoka.me/categories/%E8%B6%A3%E5%91%B3%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Git, JustForFun" scheme="http://honoka.me/tags/Git-JustForFun/"/>
    
  </entry>
  
  <entry>
    <title>Java 重写 equals 与 hashCode 的注意事项</title>
    <link href="http://honoka.me/2015/09/21/Java%E9%87%8D%E5%86%99equals%E4%B8%8EhashCode%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://honoka.me/2015/09/21/Java重写equals与hashCode的注意事项/</id>
    <published>2015-09-21T15:45:10.000Z</published>
    <updated>2018-04-16T16:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么重写 equals 的时候必须重写 hashCode？我们需要注意什么？<br><a id="more"></a></p><h2 id="为什么重写-equals-的时候必须重写-hashCode"><a href="#为什么重写-equals-的时候必须重写-hashCode" class="headerlink" title="为什么重写 equals 的时候必须重写 hashCode"></a>为什么重写 equals 的时候必须重写 hashCode</h2><p>大家可能从很多教程中了解到： </p><p>SUN官方的文档中规定：</p><blockquote><p>如果重定义 equals 方法，就必须重定义 hashCode 方法,以便用户可以将对象插入到散列(哈希)表中</p></blockquote><p>那么 SUN 公司是出于什么考虑做了这个规定呢？ </p><p>在集合框架中的 <code>HashSet</code>，<code>HashTable</code> 和 <code>HashMap</code> 都使用哈希表的形式存储数据，而 <code>hashCode</code> 计算出来的哈希码便是它们的身份证。哈希码的存在便可以： </p><p>快速定位对象，提高哈希表集合的性能。只有当哈希表中对象的索引即 <code>hashCode</code> 和对象的属性即 <code>equals</code> 同时相等时，才能够判断两个对象相等。</p><p>从上面可以看出，哈希码主要是为哈希表服务的，其实如果不需要使用哈希表，也可以不重写 <code>hashCode</code>。但是 SUN 公司应该是出于对程序扩展性的考虑（万一以后需要将对象放入哈希表集合中），才会规定重写 <code>equals</code> 的同时需要重写 <code>hashCode</code>，以避免后续开发不必要的麻烦。</p><h2 id="重写-equals-的注意事项"><a href="#重写-equals-的注意事项" class="headerlink" title="重写 equals 的注意事项"></a>重写 equals 的注意事项</h2><p>Java 语言规范要求 <code>equals</code> 需要具有如下的特性： </p><ul><li>自反性：对于任何非空引用 x，<code>x.equals()</code> 应该返回 true。</li><li>对称性：对于任何引用 x 和 y，当且仅当 <code>y.equals(x)</code> 返回 true，<code>x.equals(y)</code> 也应该返回 true。</li><li>传递性：对于任何引用 x、y 和 z，如果 <code>x.equals(y)</code> 返回 true，<code>y.equals(z)</code> 也应返回同样的结果。</li><li>一致性：如果 x 和 y 引用的对象没有发生变化，反复调用 <code>x.equals(y)</code> 应该返回同样的结果。对于任意非空引用 x，<code>x.equals(null)</code> 应该返回 false。</li></ul><h2 id="如何重写-equals"><a href="#如何重写-equals" class="headerlink" title="如何重写 equals"></a>如何重写 equals</h2><p>在对象比较时，我们应该如何编写出一个符合特性的 <code>equals</code> 方法呢，《Core Java》中提出了如下建议：</p><ol><li>显式参数命名为 <code>otherObject</code>，稍后将它转换成另一个叫做 <code>other</code> 的变量。</li><li><p>检测 <code>this</code> 与 <code>otherObject</code> 是否引用同一个对象： </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == otherObject) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p> 计算这个等式可以避免一个个比较类中的域，实现优化。</p></li><li>检测 <code>otherObject</code> 是否为 null，如果为 null，返回 false。进行非空校验是十分重要的。</li><li><p>比较 <code>this</code> 与 <code>otherObject</code> 是否属于同一个类。</p><ul><li><p>如果每个子类都重写了 <code>equals</code>，使用 <code>getClass</code> 检验：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getClass() != otherObject.getClass()) </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>如果所有子类都使用同一个 <code>equals</code>，就用 <code>instanceof</code> 检验：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(otherObject <span class="keyword">instanceof</span> ClassName))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将 <code>otherObject</code> 转换为相应的类型变量。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassName other = (ClassName) otherObject;</span><br></pre></td></tr></table></figure></li><li><p>现在可以对所有需要比较的域进行比较了。</p><ul><li>基本类型使用 == 比较</li><li>对象使用 equals 比较</li><li>数组类型的域可以使用静态方法 <code>Arrays.equals</code> 检测相应数组元素是否相等</li></ul></li><li>如果所有域匹配，则返回 true</li></ol><p><strong>注意</strong>：子类重写父类 equals 方法时，必须完全覆盖父类方法，不能因为类型错误或者其他原因定义了一个完全无关的方法。可以使用 <code>@Override</code> 注解对覆盖父类的方法进行标记，这样编译器便会检测到覆盖过程中的错误。</p><h2 id="重写-hashCode-的注意事项"><a href="#重写-hashCode-的注意事项" class="headerlink" title="重写 hashCode 的注意事项"></a>重写 hashCode 的注意事项</h2><p>散列码（hash code）是由对象导出的一个整型值。散列码没有规律，在不同的对象中通过不同的算法生成，Java 中生成 hashCode 的策略为（以下说明均摘自 Java API 8）：</p><ul><li><p>String 类的 hashCode 根据其字符串内容，使用算法计算后返回哈希码。 </p><blockquote><p>Returns a hash code for this string. The hash code for a String object is computed as s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1]</p></blockquote></li><li><p>Integer 类返回的哈希码为其包含的整数数值。</p><blockquote><p>Returns: a hash code value for this object, equal to the primitive int value represented by this Integer object.</p></blockquote></li><li><p>Object 类的 hashCode 返回对象的内存地址经过处理后的数值。</p><blockquote><p>Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap.</p></blockquote></li></ul><p>在自己的类中想要重写 hashCode 的话一般怎么做呢？建议合理地组合实例域的散列码，让各个不同对象产生的散列码更加均匀。例如我们现在有一个 <code>Cat</code> 对象，它有 name、size 和 color 三个不同域，那么可以重写 hashCode 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// hashCode 是可以返回负值的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span> * name.hashCode()</span><br><span class="line">            + <span class="number">8</span> * <span class="keyword">new</span> Double(size).hashCode()</span><br><span class="line">            + <span class="number">10</span> * color.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然还有更好的做法，我们可以直接调用静态方法 <code>Objects.hash</code> 并提供多个参数。这个方法会对各个参数调用 <code>Object.hashCode</code>，并组合返回的散列码。故以上的方法可以缩写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, size, color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： <code>equals</code> 与 <code>hashCode</code> 的定义必须一致，两个对象 <code>equals</code> 为 true，就必须有相同的 <code>hashCode</code>。例如：如果定义的 <code>equals</code> 比较的是小猫的 name，那么 <code>hashCode</code> 就需要散列该 name，而不是小猫的 color 或 size。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Core Java》卷一</li><li><a href="http://blog.csdn.net/ie800/article/details/19012291" target="_blank" rel="noopener">【哈希表数据结构】【深入理解hashcode &amp; equals】</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么重写 equals 的时候必须重写 hashCode？我们需要注意什么？&lt;br&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://honoka.me/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://honoka.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【译】Java语言速览：StackOverflow</title>
    <link href="http://honoka.me/2015/09/17/%E3%80%90%E8%AF%91%E3%80%91Java%E8%AF%AD%E8%A8%80%E9%80%9F%E8%A7%88%20by%20StackOverflow/"/>
    <id>http://honoka.me/2015/09/17/【译】Java语言速览 by StackOverflow/</id>
    <published>2015-09-17T15:37:53.000Z</published>
    <updated>2018-04-16T15:43:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>StackOverflow 是活跃度非常高的编程问答平台，上面对于编程语言的速览可作为良好的 Java 入门和查疑解惑的材料。<br><a id="more"></a></p><p>Java (请不要与 JavaScript 搞混) 是一种设计为与 Java 虚拟机 （JVM） 一起使用的多用途编程语言。一般称呼安装了相关工具使其可以开发并运行 Java 程序的电脑系统为 “Java 运行平台”。使用这个标签可以查找有关 Java 编程语言或者 Java 平台工具的问题。</p><p><a href="http://www.java.com/en/" target="_blank" rel="noopener">Java</a> 是一种高性能、跨平台、<a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noopener">面向对象</a>的编程语言和运行环境。Java 大部分语法起源于 <a href="http://stackoverflow.com/questions/tagged/c" target="_blank" rel="noopener">C</a> 和 <a href="http://stackoverflow.com/questions/tagged/c%2b%2b" target="_blank" rel="noopener">C++</a>，但是其对象模型简于 <a href="http://stackoverflow.com/questions/tagged/c%2b%2b" target="_blank" rel="noopener">C++</a>，并且减少了低级功能。Java 应用均被编译为<strong>字节码</strong>（被称为 <strong>class</strong> 文件），使其可以被 <a href="http://stackoverflow.com/questions/tagged/jvm" target="_blank" rel="noopener">JVM</a>（Java 虚拟机）执行，并独立于不同的电脑体系。<a href="http://stackoverflow.com/questions/tagged/jvm" target="_blank" rel="noopener">JVM</a> 通过一个<strong>垃圾收集器</strong>（查看 <a href="http://stackoverflow.com/questions/tagged/garbage-collection" target="_blank" rel="noopener">garbage-collection</a>）帮助管理内存，当对象不再使用时可以将其从内存中移除。Java 的<a href="http://en.wikipedia.org/wiki/Type_system" target="_blank" rel="noopener">系统类型</a>是静态、强类型、安全、声明类型和显式的。Java 支持反射、接口等与 <a href="http://stackoverflow.com/questions/tagged/c" target="_blank" rel="noopener">C</a> 和 <a href="http://stackoverflow.com/questions/tagged/c%2b%2b" target="_blank" rel="noopener">C++</a> 相似的功能，例如 <a href="http://stackoverflow.com/questions/tagged/jni" target="_blank" rel="noopener">JNI</a>（The Java Native Interface）。</p><p><a href="!http://stackoverflow.com/questions/tagged/java">Java</a> 被设计为尽可能减少与电脑系统的依赖关系，可以允许应用开发者 “一处编写，处处运行”（<a href="http://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noopener">WORA</a>）：在一个平台上执行的代码不需重新编译就能在其他机器上运行。Java 最初由 <a href="http://en.wikipedia.org/wiki/James_Gosling" target="_blank" rel="noopener">James Gosling</a> 在 Sun Mircosystems 公司（2009年4月20日已被 Oracle 并购）设计，最初是于 1995 年作为 Sun Microsystems公司 Java 运行平台的核心元件发行。</p><p>安装工具用于开发和运行 Java 的电脑系统被 Sun（现为 Oracle）命名为 <a href="http://en.wikibooks.org/wiki/Java_Programming/The_Java_Platform" target="_blank" rel="noopener">Java 运行平台</a>。各种具有平台特性的工具可以帮助开发者更有效率地使用 Java 程序语言开发。</p><p>平台包含两个基本的软件包：</p><ul><li><strong>Java 运行环境（JRE）</strong>：用于运行 Java 应用和程序；</li><li><strong>Java 开发工具包（JDK）</strong>：用于开发 Java 应用和程序。JDK 总是伴随着一个 JRE。</li></ul><p>在本节中，我们将进一步探讨这两个软件包作为 Java 运行平台的组成部分，其产生的作用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作为参考的大部分 Java 实现方式都是开源的（the <a href="http://openjdk.java.net/" target="_blank" rel="noopener">OpenJDK</a>），由包括 Oracle，Apple，SAP 与 IBM 在内的大型企业提供支持。</p><p>极少的电脑可以直接运行 Java 程序。因此，Java 环境通常要求安装合适的软件组件。在 Windows 系统上，一般可以从 <a href="http://www.java.com/en/" target="_blank" rel="noopener">java.com</a> 下载免费的 Java 运行环境（JRE）。在 Macintosh 系统上，当一个应用需要 Java 运行环境时，会在启动时请求用户下载 Java。在类 <a href="http://stackoverflow.com/questions/tagged/linux" target="_blank" rel="noopener">Linux</a> 系统上，Java 一般通过包管理器安装。</p><p>Windows 和 Mac 平台的开发者经常需要额外的工具，使用工具所需的免费 Java 开发包（JDK）必须从 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle</a>下载并手动安装。</p><p>Java 会被编译为字节码，然后由 JVM 通过编译为原生代码进行解析工作。编译技术为<a href="http://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank" rel="noopener">动态编译</a>（JIT）。最初这被视为降低性能的做法，但是随着 JVM 和 JIT 的发展，担忧逐渐减少。在某些情况下，例如当一个旧版本的处理器需要向后兼容时，JVM 甚至快于原生代码编译速度。</p><p>注意：也有其他供应商存在，然而大部分都有授权费。对于 <a href="http://stackoverflow.com/questions/tagged/linux" target="_blank" rel="noopener">linux</a> 和其他平台，请查阅相关的操作系统文档。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>包含主要的 Java 版本，代号和发行时间：</p><ul><li>JDK 1.0 (1996/01/23)</li><li>JDK 1.1 (1997/02/19)</li><li>J2SE 1.2 [Playground] (1998/12/08)</li><li>J2SE 1.3 [Kestrel] (2000/05/08)</li><li>J2SE 1.4 [Merlin] (2002/02/06)</li><li>J2SE 5.0 [Tiger] (2004/09/30)</li><li>Java SE 6 [Mustang] (2006/12/11)</li><li>Java SE 7 [Dolphin] (2011/07/28)</li><li>Java SE 8 [JSR 337] (2014/03/18)</li><li>Java SE 9 [TBD ] (未发布)</li></ul><p>最新的稳定版本：</p><ul><li>Java Standard Edition 8 Update 51 (1.8.0_51) - (2015/07/14)</li><li>Java Standard Edition 7 Update 79 (1.7.0_79) - (2015/04/14)</li></ul><p>更多的代号及发行日期请访问 <a href="http://www.oracle.com/technetwork/java/javase/codenames-136090.html" target="_blank" rel="noopener">J2SE Code Names</a>。要查看 JDK 的版本发行日志请访问 <a href="http://en.wikipedia.org/wiki/Java_version_history" target="_blank" rel="noopener">Wikipedia</a> 的 Java 版本历史文章。</p><p>Java SE 8 正在发行并且可<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载</a>。</p><p><a href="http://www.oracle.com/technetwork/java/eol-135779.html" target="_blank" rel="noopener">公共更新</a>的结束日期（以前称为结束生命）为：</p><ul><li>J2SE 1.4 - 2008/10</li><li>J2SE 5.0 - 2009/10</li><li>Java SE 6 - 2013/02</li><li>Java SE 7 - 2015/04</li><li>Java SE 8 - 2017/09</li></ul><h2 id="初始帮助"><a href="#初始帮助" class="headerlink" title="初始帮助"></a>初始帮助</h2><p>你是 Java 初学者或者需要帮助使你的第一个 Java 程序运行？请参看 <a href="http://docs.oracle.com/javase/tutorial/getStarted/index.html" target="_blank" rel="noopener">Oracle Java 教程开始部分</a>。</p><p>询问问题前，请使用右上角的搜索栏查找是否已被询问（我们有很多相似的问题），并且阅读<a href="http://blogs.msmvps.com/jonskeet/2010/08/29/writing-the-perfect-question/" target="_blank" rel="noopener">《如何提出一个好的问题》</a>，学习怎样吸引 Jon Skeet 回答你的问题。</p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>Java 程序需要坚持下列的<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html" target="_blank" rel="noopener">命名规范</a>以提高可读性和降低意外错误出现的可能性。通过遵守这些命名规范，可以使他人阅读你的代码和帮助你时更加轻松。</p><p><strong>类型名</strong>（类，接口，枚举等等）应以大写字母开头，随后的每个单词首字母大写。例如：<figure class="highlight plain"><figcaption><span>和 ```NullPointerException```。有时被称为 pascal case（帕斯卡命名法）。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**方法名**应使用 camelCased（驼峰式命名法），即它们应以小写字母开头，随后的每个单词首字母大写。例如：indexOf，printStackTrace，interrupt。</span><br><span class="line"></span><br><span class="line">**字段名**应使用和方法名一样的驼峰式命名法。</span><br><span class="line"></span><br><span class="line">**常量表达式命名**（```static final``` 不可变对象）应被写为 ALL_CAPS形式，使用下划线分割每个单词。例如：```YELLOW```，```DO_NOTHING_ON_CLOSE```。这同样应用于一个枚举类（```Enum```）的变量命名。然而，```static final``` 修饰可变对象时应使用驼峰式命名。</span><br><span class="line"></span><br><span class="line">## Hello World - 你的第一个程序</span><br><span class="line"></span><br><span class="line">**Hello World** 程序的代码为：</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;Hello, World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译和调用 <strong>Hello world</strong> 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -d . HelloWorld.java </span><br><span class="line">java -cp . HelloWorld</span><br></pre></td></tr></table></figure><p>Java 源代码被编译为中间代码形式（针对 <a href="http://en.wikipedia.org/wiki/Java_virtual_machine" target="_blank" rel="noopener">Java 虚拟机</a> 的字节码指令），然后可以被 <code>java</code> 命令执行。</p><h2 id="更多信息："><a href="#更多信息：" class="headerlink" title="更多信息："></a>更多信息：</h2><ul><li><a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29" target="_blank" rel="noopener">Java 维基页面</a></li><li><a href="http://en.wikipedia.org/wiki/Java_Development_Kit" target="_blank" rel="noopener">JDK 维基页面</a></li><li><a href="http://en.wikipedia.org/wiki/Java_virtual_machine#Execution_environment" target="_blank" rel="noopener">JRE 维基页面</a></li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle 的 Java 下载页面</a></li></ul><h2 id="开发Java常用的IDE"><a href="#开发Java常用的IDE" class="headerlink" title="开发Java常用的IDE"></a>开发Java常用的IDE</h2><ul><li><a href="https://eclipse.org/downloads/packages/eclipse-ide-java-developers/lunasr1" target="_blank" rel="noopener">Eclipse IDE</a></li><li><a href="https://netbeans.org/downloads/" target="_blank" rel="noopener">NetBeans IDE</a></li><li><a href="http://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a></li><li><a href="http://spring.io/tools" target="_blank" rel="noopener">Spring Tool Suite</a>（基于 Eclipse，包含用于 <a href="http://stackoverflow.com/questions/tagged/spring" target="_blank" rel="noopener">Spring</a> 的插件）</li><li><a href="http://www.oracle.com/technetwork/developer-tools/jdev/overview/index.html" target="_blank" rel="noopener">JDeveloper IDE</a></li><li><a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">Android Studio</a>（基于 IntelliJ IDEA，主要用于 <a href="http://stackoverflow.com/questions/tagged/android" target="_blank" rel="noopener">android</a> 项目开发）</li><li><a href="http://www.bluej.org/" target="_blank" rel="noopener">BlueJ</a></li></ul><h2 id="初学者资源"><a href="#初学者资源" class="headerlink" title="初学者资源"></a>初学者资源</h2><ul><li><a href="http://docs.oracle.com/javase/tutorial/" target="_blank" rel="noopener">The Java Tutorials</a> - 从在 Windows/Linux/Mac 上的 scratch 开始，覆盖大部分标准库。</li><li><a href="http://docs.oracle.com/javase/tutorial/java/generics/" target="_blank" rel="noopener">Generics</a></li><li><a href="http://codingbat.com/java" target="_blank" rel="noopener">Coding Bat (Java)</a> - 学习部分基础之后，通过 Coding Bat 磨练和完善你的 Java 技术。</li><li><a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html" target="_blank" rel="noopener">Java 编程规范</a></li><li><a href="https://www.youtube.com/playlist?list=PLBD5381FE500534C0" target="_blank" rel="noopener">Stanford Java 视频课程</a></li><li><a href="https://www.udemy.com/java-tutorial" target="_blank" rel="noopener">Udemy Java 免费课程</a></li><li><a href="https://www.edx.org/course?search_query=java" target="_blank" rel="noopener">Edx 课程：Java 编程导论</a></li></ul><h2 id="日常帮助资源"><a href="#日常帮助资源" class="headerlink" title="日常帮助资源"></a>日常帮助资源</h2><ul><li><a href="http://www.oracle.com/technetwork/java/javase/documentation/index.html" target="_blank" rel="noopener">Java SE 文档</a></li><li><a href="http://docs.oracle.com/javase/7/docs/api/" target="_blank" rel="noopener">Java 7 API 参考手册</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java 8 API 参考手册</a></li></ul><h2 id="进阶资源"><a href="#进阶资源" class="headerlink" title="进阶资源"></a>进阶资源</h2><ul><li><a href="http://docs.oracle.com/javase/specs/" target="_blank" rel="noopener">Java 语言与虚拟机说明</a></li><li><a href="http://en.wikipedia.org/wiki/List_of_JVM_languages" target="_blank" rel="noopener">其他可以在 JVM 上与 Java 混合使用的开发语言</a></li></ul><h2 id="免费-Java-编程图书与资源"><a href="#免费-Java-编程图书与资源" class="headerlink" title="免费 Java 编程图书与资源"></a>免费 Java 编程图书与资源</h2><ul><li><a href="http://ptgmedia.pearsoncmg.com/images/013143697X/downloads/013143697X_book.pdf" target="_blank" rel="noopener">《Linux 开发 Java 应用》（Carl Albing 与 Michael Schwarz 合著，PDF）</a></li><li><a href="http://greenteapress.com/thinkapjava/" target="_blank" rel="noopener">《如何像一名电脑科学家一样思考》</a></li><li><a href="http://spring.io/guides" target="_blank" rel="noopener">《Spring IO Guides》</a></li><li><a href="http://docs.oracle.com/javaee/7/JEETT.pdf" target="_blank" rel="noopener">《The Java EE7 Tutorial》（PDF）</a></li><li><a href="http://www.redbooks.ibm.com/redbooks/SG245118.html" target="_blank" rel="noopener">《Java Thin-Client Programming》</a></li><li><a href="http://docs.oracle.com/javase/tutorial/" target="_blank" rel="noopener">《Oracle’s Java Tutorials》</a></li><li><a href="http://www.mindview.net/Books/TIJ/" target="_blank" rel="noopener">《Thinking in Java》</a></li><li><a href="http://njbartlett.name/files/osgibook_preview_20091217.pdf" target="_blank" rel="noopener">《OSGi in Practice》（PDF）</a></li><li><a href="http://www.mkyong.com/" target="_blank" rel="noopener">《Category wise tutorials - J2EE》</a></li><li><a href="http://roseindia.net/java/" target="_blank" rel="noopener">《Java Example Codes and Tutorials - J2EE》</a></li><li><a href="https://www.udemy.com/java-design-patterns-tutorial/" target="_blank" rel="noopener">《Java Design Pattern Video Training》</a></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>人们在 Java 主题下经常询问的问题：</p><p>通用：</p><ul><li><a href="http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java" target="_blank" rel="noopener">Java 与 JavaScript 有什么不同</a></li><li><a href="http://stackoverflow.com/questions/147181/how-can-i-convert-my-java-program-to-an-exe-file" target="_blank" rel="noopener">我如何将自己的 Java 程序转换为 .exe 文件</a></li></ul><p>环境变量：</p><ul><li><a href="http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath/219801#219801" target="_blank" rel="noopener">在环境变量中设置多种 jar 包</a></li></ul><p><code>String</code>，<code>StringBuilder</code> 与 <code>toString</code>：</p><ul><li><a href="http://stackoverflow.com/questions/513832/how-do-i-compare-strings-in-java" target="_blank" rel="noopener">在 Java 中如何比较字符串？</a> </li><li><a href="http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer-in-java" target="_blank" rel="noopener">Java 中的 StringBuilder 与 StringBuffer</a></li><li><a href="http://stackoverflow.com/questions/29140402/why-do-i-get-sometype2f92e0f4-when-i-print-my-java-object" target="_blank" rel="noopener">为什么当我在自己的 Java 项目中打印时得到 <code>SomeType@2f92e0f4</code>？</a></li><li><a href="http://stackoverflow.com/questions/1552301/immutability-of-strings-in-java" target="_blank" rel="noopener">Java 中的字符串常量</a></li></ul><p><code>equals</code> 与 <code>hashCode</code>：</p><ul><li><a href="http://stackoverflow.com/questions/2772763/why-equals-method-when-we-have-operator" target="_blank" rel="noopener"><code>equals()</code> 和 <code>==</code> 有什么不同</a></li><li><a href="http://stackoverflow.com/questions/27581/overriding-equals-and-hashcode-in-java" target="_blank" rel="noopener">在 Java 中重写 <code>equals()</code> 和 <code>hashCode()</code> 方法</a></li></ul><p>Java Platform SE API：</p><ul><li><a href="http://stackoverflow.com/questions/13102045/skipping-nextline-after-use-nextint" target="_blank" rel="noopener">使用 <code>nextInt()</code> 后跳过 <code>nextLine()</code></a></li><li><a href="http://stackoverflow.com/questions/2592501/compare-dates-in-java" target="_blank" rel="noopener">在 Java 中比较日期</a></li><li><a href="http://stackoverflow.com/questions/223918/java-efficient-equivalent-to-removing-while-iterating-a-collection" target="_blank" rel="noopener">Java：在迭代集合的过程中做高效地删除操作</a></li><li><a href="http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java" target="_blank" rel="noopener">如何排序 <code>Map&lt;Key, Value&gt;</code> 中的值</a></li><li><a href="http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist" target="_blank" rel="noopener">什么时候使用 <code>LinkedList&lt;&gt;</code> 而不是 <code>ArrayList&lt;&gt;</code></a></li><li><a href="http://stackoverflow.com/questions/20538869/arrays-aslist-in-java" target="_blank" rel="noopener">说明 <code>Arrays.asList()</code></a></li><li><a href="http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable" target="_blank" rel="noopener"><code>HashMap</code> 与 <code>Hashtable</code> 之间的区别</a></li></ul><p>泛型：</p><ul><li><a href="http://stackoverflow.com/questions/2745265/is-listdog-a-subclass-of-listanimal-why-arent-javas-generics-implicitl" target="_blank" rel="noopener"><code>List&lt;Dog&gt;</code> 是 <code>List&lt;Animal&gt;</code> 的子类吗？为什么 Java 的泛型不支持隐式多态?</a></li><li><a href="http://stackoverflow.com/questions/2723397/java-generics-what-is-pecs" target="_blank" rel="noopener">Java 泛型：PECS 是什么？</a></li><li><a href="http://stackoverflow.com/questions/2770321/what-is-a-raw-type-and-why-shouldnt-we-use-it" target="_blank" rel="noopener">原型是什么？为什么我们不应使用？</a></li><li><a href="http://stackoverflow.com/questions/529085/how-to-create-a-generic-array-in-java" target="_blank" rel="noopener">如何创建一个泛型数组？</a></li></ul><p>类与对象：</p><ul><li><a href="http://stackoverflow.com/questions/40480/is-java-pass-by-reference" target="_blank" rel="noopener">Java 是按引用传递的吗？</a></li><li><a href="http://stackoverflow.com/questions/9969690/whats-the-advantage-of-a-java-enum-versus-a-class-with-public-static-final-fiel" target="_blank" rel="noopener">Java <code>enum</code> 对比 <code>public static final</code>字段的类有何优势？</a></li><li><a href="http://stackoverflow.com/questions/215497/in-java-whats-the-difference-between-public-default-protected-and-private" target="_blank" rel="noopener">public，protected，private 与 default 之间有什么区别</a></li></ul><p>算法与规范：</p><ul><li><a href="http://stackoverflow.com/questions/4937402/moving-decimal-places-over-in-a-double" target="_blank" rel="noopener">为什么我不能正确地打印一个 double 类型？</a></li><li><a href="http://stackoverflow.com/questions/7220681/division-of-integers-in-java" target="_blank" rel="noopener">为什么整数做除法运算会返回 0？</a></li><li><a href="http://stackoverflow.com/questions/8710619/java-operator" target="_blank" rel="noopener">Java 的 <code>+=</code> 操作</a></li></ul><p>调试：</p><ul><li><a href="http://stackoverflow.com/a/24100776/829571" target="_blank" rel="noopener"><code>NullPointerException</code> 是什么，我应该如何修复？</a></li><li><a href="http://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors" target="_blank" rel="noopener">堆栈追踪是什么？我应该如何使用才能调试自己的应用错误？</a></li><li><a href="http://stackoverflow.com/questions/271526/how-to-avoid-null-statements-in-java" target="_blank" rel="noopener">我应该如何避免检查 null？</a></li><li><a href="http://stackoverflow.com/questions/34413/why-am-i-getting-a-noclassdeffounderror-in-java" target="_blank" rel="noopener">为什么会出现 <code>NoClassDefFoundError</code> 错误？</a></li><li><a href="http://stackoverflow.com/questions/2647154/java-package-project-nosuchmethod-error" target="_blank" rel="noopener">Java 中的 <code>NoSuchMethodError</code></a></li></ul><p><code>Thread</code> 与多线程：</p><ul><li><a href="http://stackoverflow.com/questions/3590000/what-does-java-lang-thread-interrupt-do" target="_blank" rel="noopener"><code>java.lang.Thread.interrupt()</code> 做了什么？</a></li><li><a href="http://stackoverflow.com/questions/25425130/loop-doesnt-see-changed-value-without-a-print-statement" target="_blank" rel="noopener">无法通过打印语句查看循环中的变量改变</a></li><li><a href="http://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread" target="_blank" rel="noopener"><code>implements Runnable</code> 对比 <code>extends Thread</code></a></li></ul><p>与操作系统交互：</p><ul><li><a href="http://stackoverflow.com/questions/31776546/why-does-runtime-execstring-work-for-some-but-not-all-commands/31776547" target="_blank" rel="noopener">为什么 <code>Runtime.exec(String)</code> 只在一些命令下产生作用？</a></li></ul><p>(提交者们，请仅仅列出经常被询问的问题。)</p><p>聊天室</p><ul><li><a href="http://chat.stackoverflow.com/rooms/139/java" target="_blank" rel="noopener">Stack Overflow 的 Java 聊天室</a></li><li><a href="http://chat.stackoverflow.com/rooms/19132/java-and-android-era" target="_blank" rel="noopener">java-and-android-era</a></li></ul><hr><p>原文链接： <a href="http://stackoverflow.com/tags/java/info" target="_blank" rel="noopener">stackoverflow</a><br>翻译： <a href="http://www.importnew.com/16689.html" target="_blank" rel="noopener">ImportNew.com</a> - <a href="http://www.importnew.com/author/xal821792703" target="_blank" rel="noopener">honoka</a><br>译文链接： <a href="http://www.importnew.com/16689.html" target="_blank" rel="noopener">http://www.importnew.com/16689.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;StackOverflow 是活跃度非常高的编程问答平台，上面对于编程语言的速览可作为良好的 Java 入门和查疑解惑的材料。&lt;br&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://honoka.me/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://honoka.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>程序员应如何提高实效?读《程序员修炼之道》有感</title>
    <link href="http://honoka.me/2015/07/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E5%AE%9E%E6%95%88%EF%BC%9F%E8%AF%BB%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://honoka.me/2015/07/16/程序员应如何提高实效？读《程序员修炼之道》有感/</id>
    <published>2015-07-16T14:00:41.000Z</published>
    <updated>2018-04-16T15:01:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>《程序员修炼之道》浅谈<br><a id="more"></a></p><p>不得不说，《程序员修炼之道》的译名透着一股浓浓的山寨气息，曾经让我敬而远之。后来当我在工作效率上频频碰壁，又找不到突破的途径时，因为朋友的强烈推荐让我又拾起了这本书。</p><p>翻开书本刚刚阅读了序言，其中关于想要提高实效的程序员应培养何种特征一下子就击中大脑，原来如此，原来我就欠缺在这些地方啊，突然就有了一种不写不快的冲动。</p><p>书中提到了由于每个开发者的个体性，必然会营造出属于自己的个体环境，但是注重实效的程序员所拥有的特征却惊人的一致：</p><blockquote><p>早期的采纳者/快速的改编者。</p></blockquote><p>拥有学习一切的直觉，喜爱试验各种新技术，并联系自己的知识网络，然后运用在相关工作中。</p><blockquote><p>好奇</p></blockquote><p>喜欢提问，不错过每一个美妙的实现，不放过每一个偶然遇见的bug，每一个小点都可能会应用到以后的某个场景。</p><blockquote><p>批判的思考者</p></blockquote><p>喜欢挑战，讨厌照搬别人的说法和解决方案，不会放弃思考。</p><blockquote><p>有现实感</p></blockquote><p>设法理解你面临的每个问题的内在本质。对每一项任务有着良好的感知，事情有多困难？需要多长时间？了解困难才会有战胜困难的毅力。</p><blockquote><p>多才多艺</p></blockquote><p>尽力熟悉广泛的技术和环境，并且在努力工作的同时，使自己的技术池与时俱进，以备随时可能面对的新领域和新挑战。</p><p>或许这五点略显宽泛，但是在工作中随时注意，在某个情景下就会灵光一闪：“啊，这个时候我应该XXX做最有实效”，那么便会不断成长，在此与诸君共勉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《程序员修炼之道》浅谈&lt;br&gt;
    
    </summary>
    
      <category term="编程技术, 读后感" scheme="http://honoka.me/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="读后感" scheme="http://honoka.me/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>高德地图开发小记の如何判断点是否在折线上</title>
    <link href="http://honoka.me/2015/04/16/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%A1%E3%81%AE%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E6%8A%98%E7%BA%BF%E4%B8%8A/"/>
    <id>http://honoka.me/2015/04/16/高德地图开发小计の如何判断点是否在折线上/</id>
    <published>2015-04-16T15:08:24.000Z</published>
    <updated>2018-04-16T15:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>高德地图开发中的一个问题解决小记<br><a id="more"></a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近使用高德地图 JavaScript API 开发地图应用，提炼了不少心得，故写点博文，做个系列总结一下，希望能帮助到 LBS 开发同胞们。</p><p>项目客户端使用高德地图 JavaScript API，主要业务为以区县为基础自由划分区域，并将划分好的区域存入数据库，以作后续操作。</p><p>开发之初便遇见一个问题，客户可以在城市区县范围内自由划分自己需要的区域，但是高德地图并未提供自定义区域的实现方法，所以只能借助 API 自造轮子。</p><p>经过讨论得出一个实现方法，初始加载城市区县区域后，自定义折线对象，然后在区域内通过鼠标点击画出折线，再将该折线对象和已有区域边界的路径值一起保存进数据库，便能够构成划分后的两个新区域了。</p><p>研究出实现方法后，遇见了一个难题，如何判断鼠标点击的点是否在折线上：</p><ul><li>画起点和终点时必须在原有区域线上，否则无法形成新的封闭空间。故需要判断鼠标点击的点是否在原有折线上，在就让其成为起点或终点，不在则让其重新点击。</li><li>但是用户点击时无法保证完全点击在原有折线上，故需要允许一定的误差，在误差内则判断为点在折线上，误差外让其重新点击。</li><li>判断为在误差内后，鼠标点终究不在折线上，此时需要在原折线上生成一个新的点（离该鼠标点最近的点）</li></ul><h3 id="初期方案"><a href="#初期方案" class="headerlink" title="初期方案"></a>初期方案</h3><p>一开始希望通过判断折线上每两个相邻点与鼠标点三点共线则证明点在折线上，参阅《代码之美》后，发现了两种解决算法：</p><ul><li>一种是判断斜率相等，但是由于以下问题被《代码之美》否决，并提出了更加优化的方法。 <ul><li>判断斜率相等存在多种特殊情况，如两点经度相等或者纬度相等时，代码实现过于繁琐。</li><li>斜率使用除法计算为浮点数，存在一定误差。</li></ul></li><li>更优化的方法为三点可以组成一个三角形，当三角形面积接近于0时，则判断点在线上。具体细节可以参看《代码之美》第33章。在实际运用中，发现如果只存在三个点时，计算三角形面积毫无疑问是一个优秀的算法。</li></ul><p>但是如前文提到的，鼠标点无法精确点击在折线上，故需要允许一定误差，也就是说三角形面积无法等于0，只能遍历折线每两个相邻点，计算鼠标点与两点组成的三角形面积，取出最小的面积，当其小于一个误差值时，点在折线上。</p><p>这样就可能会产生缺陷。一个折线对象存在着数以千计的相邻点，当鼠标点与折线上某两个相邻点组成的三角形面积最小时，却无法保证该点一定离这两个相邻点最近。</p><ul><li><p>理想情况下是这样的。</p><p>  <img src="http://7xinvi.com1.z0.glb.clouddn.com/%E7%90%86%E6%83%B3%E4%B8%89%E8%A7%92.png" alt="理想情况示意图"></p><p>  三角形面积最小，并且鼠标点离该两点组成的线段最近。</p></li><li><p>而特殊情况下会是这样的.</p><p> <img src="http://7xinvi.com1.z0.glb.clouddn.com/%E7%89%B9%E6%AE%8A%E4%B8%89%E8%A7%92.png" alt="特殊情况示意图"></p><p> 三角形面积同样最小，但鼠标点其实离线段较远。</p></li></ul><h3 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h3><p>无奈只能另寻解决方法，然后在百度 LBS 开源库中发现几何运算类提供了判断线是否在折线上的方法 <code>isPointOnPolyline()</code>，大喜，赶紧研究一番，应用在项目中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断点是否在矩形内</span></span><br><span class="line"><span class="comment"> * @param &#123;Point&#125; point 点对象</span></span><br><span class="line"><span class="comment"> * @param &#123;Bounds&#125; bounds 矩形边界对象</span></span><br><span class="line"><span class="comment"> * @returns &#123;Boolean&#125; 点在矩形内返回true,否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPointInRect</span>(<span class="params">point, bounds</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sw = bounds.getSouthWest(); <span class="comment">//西南脚点</span></span><br><span class="line">    <span class="keyword">var</span> ne = bounds.getNorthEast(); <span class="comment">//东北脚点</span></span><br><span class="line">    <span class="keyword">return</span> (point.lng &gt;= sw.lng &amp;&amp; point.lng &lt;= ne.lng &amp;&amp; point.lat &gt;= sw.lat &amp;&amp; point.lat &lt;= ne.lat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断点是否在折线上</span></span><br><span class="line"><span class="comment"> * @param &#123;Point&#125; point 点对象</span></span><br><span class="line"><span class="comment"> * @param &#123;Polyline&#125; polyline 折线对象</span></span><br><span class="line"><span class="comment"> * @returns &#123;Boolean&#125; 点在折线上返回true,否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPointOnPolyline</span>(<span class="params">point, polyline</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//首先判断点是否在线的外包矩形内，如果在，则进一步判断，否则返回false</span></span><br><span class="line">    <span class="keyword">var</span> lineBounds = polyline.getBounds();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isPointInRect(point, lineBounds)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断点是否在线段上，设点为Q，线段为P1P2 ，</span></span><br><span class="line">    <span class="comment">//判断点Q在该线段上的依据是：( Q - P1 ) × ( P2 - P1 ) = 0，且 Q 在以 P1，P2为对角顶点的矩形内</span></span><br><span class="line">    <span class="keyword">var</span> pts = polyline.getPath();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pts.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> curPt = pts[i];</span><br><span class="line">        <span class="keyword">var</span> nextPt = pts[i + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 首先判断point是否在curPt和nextPt之间，即：此判断该点是否在该线段的外包矩形内，先判断离point最近的两个相邻点，再进行斜率计算，有效避免干扰</span></span><br><span class="line">        <span class="keyword">if</span> (point.lng &gt;= <span class="built_in">Math</span>.min(curPt.lng, nextPt.lng) &amp;&amp; point.lng &lt;= <span class="built_in">Math</span>.max(curPt.lng, nextPt.lng) &amp;&amp;</span><br><span class="line">            point.lat &gt;= <span class="built_in">Math</span>.min(curPt.lat, nextPt.lat) &amp;&amp; point.lat &lt;= <span class="built_in">Math</span>.max(curPt.lat, nextPt.lat)) &#123;</span><br><span class="line">            <span class="comment">//判断点是否在直线上公式，此处使用减法计算两个斜率之差，有效地简化了特殊情况的判断</span></span><br><span class="line">            <span class="keyword">var</span> precision = (curPt.lng - point.lng) * (nextPt.lat - point.lat) -</span><br><span class="line">                (nextPt.lng - point.lng) * (curPt.lat - point.lat);</span><br><span class="line">            <span class="keyword">if</span> (precision &lt; <span class="number">2e-10</span> &amp;&amp; precision &gt; <span class="number">-2e-10</span>) &#123;<span class="comment">//实质判断是否接近0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测一测项目，哈哈，可行，长舒一口气。正准备好好放松下，OMG！又遇见缺陷了。</p><ul><li><p>如下图北京西城区存在的一个情况：</p><p>  <img src="http://7xinvi.com1.z0.glb.clouddn.com/%E7%BB%8F%E7%9B%B8%E5%90%8C%E9%94%99%E8%AF%AF.png" alt="北京西城区缺陷演示"></p><p>  此时折线上相邻两点的经度几乎相等。</p></li><li><p>或者北京丰台区存在的情况：</p><p>  <img src="http://7xinvi.com1.z0.glb.clouddn.com/%E7%BA%AC%E7%9B%B8%E5%90%8C%E9%94%99%E8%AF%AF.png" alt="北京丰台区缺陷演示"></p><p>  此时折线上相邻两点的纬度几乎相等。</p></li></ul><p>由于方法优先判断鼠标点是否在折线某相邻两点的外包矩形内，但是上述两种情况下，相邻两点的外包矩形几乎为0，则鼠标点只有在精确点击到折线的情况下才会判断为true。这与实际开发中要求允许一定误差是相悖的，无奈只能另寻解决方法。</p><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>皇天不负有心人，在两次推翻实现算法后，终于又找到一种解决方法。遍历折线对象取出所有相邻点，计算鼠标点到每两个相邻点组成的线段的最短距离，然后排序最短距离，取出其中最小的距离，如果小于误差范围，则判断点在折线上。如果需要闭合区间，则在折线上生成一个离鼠标点最近的折线点（一般取垂足经纬度）。实现代码如下（代码已分享至 <a href="https://github.com/nitta-honoka/LBSUtilsExtension" target="_blank" rel="noopener">github</a>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两点之间的距离</span></span><br><span class="line"><span class="comment"> * @param x1 第一个点的经度</span></span><br><span class="line"><span class="comment"> * @param y1 第一个点的纬度</span></span><br><span class="line"><span class="comment"> * @param x2 第二个点的经度</span></span><br><span class="line"><span class="comment"> * @param y2 第二个点的纬度</span></span><br><span class="line"><span class="comment"> * @returns distance 两点之间的距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPoToPoDis</span>(<span class="params">x1, y1, x2, y2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点到折线上相邻两点组成的线段的最短距离</span></span><br><span class="line"><span class="comment"> * @param point 点坐标</span></span><br><span class="line"><span class="comment"> * @param curPt 折线点坐标</span></span><br><span class="line"><span class="comment"> * @param nextPt 与 curPt 相邻的折线点坐标</span></span><br><span class="line"><span class="comment"> * @returns distance 距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getPoToLineDis</span>(<span class="params">point, curPt, nextPt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">lng</span>: xCur, <span class="attr">lat</span>: yCur &#125; = curPt <span class="comment">// 折线点经纬度，将此点记作 P1</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">lng</span>: xNext, <span class="attr">lat</span>: yNext &#125; = nextPt <span class="comment">// 相邻折线点经纬度，将此点记作 P2</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">lng</span>: xPoint, <span class="attr">lat</span>: yPoint &#125; = point <span class="comment">// 外点经纬度，将此点记作 P</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lengthCurToNext = getPoToPoDis(xCur, yCur, xNext, yNext); <span class="comment">// P1 到 P2 的长度，记作 a 线段</span></span><br><span class="line">    <span class="keyword">const</span> lengthCurToPo = getPoToPoDis(xCur, yCur, xPoint, yPoint); <span class="comment">// P1 到 P 的长度，记作 b 线段</span></span><br><span class="line">    <span class="keyword">const</span> lengthNextToPo = getPoToPoDis(xNext, yNext, xPoint, yPoint); <span class="comment">// P2 到 P 的长度，记作 c 线段</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (lengthNextToPo + lengthCurToPo === lengthCurToNext) &#123;</span><br><span class="line">        <span class="comment">// 当 b + c = a 时，P 在 P1 和 P2 组成的线段上</span></span><br><span class="line">        distance = <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lengthNextToPo * lengthNextToPo &gt;=</span><br><span class="line">        lengthCurToNext * lengthCurToNext + lengthCurToPo * lengthCurToPo) &#123;</span><br><span class="line">        <span class="comment">// 当 c * c &gt;= a * a + b * b 时组成直角三角形或钝角三角形，投影在 P1 延长线上</span></span><br><span class="line">        distance = lengthCurToPo</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lengthCurToPo * lengthCurToPo &gt;=</span><br><span class="line">        lengthCurToNext * lengthCurToNext + lengthNextToPo * lengthNextToPo) &#123;</span><br><span class="line">        <span class="comment">// 当 b * b &gt; c * c + a * a 时组成直角三角形或钝角三角形，投影在 p2 延长线上</span></span><br><span class="line">        distance = lengthNextToPo</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他情况组成锐角三角形，则求三角形的高</span></span><br><span class="line">        <span class="keyword">const</span> p = (lengthCurToPo + lengthNextToPo + lengthCurToNext) / <span class="number">2</span> <span class="comment">// 半周长</span></span><br><span class="line">        <span class="keyword">const</span> s = <span class="built_in">Math</span>.sqrt(p * (p - lengthCurToNext) *</span><br><span class="line">            (p - lengthCurToPo) * (p - lengthNextToPo)) <span class="comment">// 海伦公式求面积</span></span><br><span class="line">        distance = <span class="number">2</span> * s / lengthCurToNext <span class="comment">// 点到线的距离（利用三角形面积公式求高)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断点是否在矩形内</span></span><br><span class="line"><span class="comment"> * @param point 点对象</span></span><br><span class="line"><span class="comment"> * @param bounds 矩形边界对象</span></span><br><span class="line"><span class="comment"> * @returns 点在矩形内返回 true,否则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPointInRect</span>(<span class="params">point, bounds</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> sw = bounds.getSouthWest() <span class="comment">// 西南脚点</span></span><br><span class="line">    <span class="keyword">const</span> ne = bounds.getNorthEast() <span class="comment">// 东北脚点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (point.lng &gt;= sw.lng &amp;&amp; point.lng &lt;= ne.lng &amp;&amp; point.lat &gt;= sw.lat &amp;&amp; point.lat &lt;= ne.lat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到离鼠标点最近的折线点坐标</span></span><br><span class="line"><span class="comment"> * @param point 鼠标点</span></span><br><span class="line"><span class="comment"> * @param curPt，nextPt 折线上相邻两点</span></span><br><span class="line"><span class="comment"> * @param precision 误差，默认 2e-4</span></span><br><span class="line"><span class="comment"> * @returns &#123; polyLng, polyLat &#125; 折线点经纬度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genPointOnPolyline</span>(<span class="params">point, curPt, nextPt, precision = <span class="number">2e-4</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pointLng, pointLat</span><br><span class="line">    <span class="keyword">const</span> precisionLng = curPt.lng - nextPt.lng</span><br><span class="line">    <span class="keyword">const</span> precisionLat = curPt.lat - nextPt.lat</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (precisionLng &lt; precision &amp;&amp; precisionLng &gt; -precision) &#123;</span><br><span class="line">        <span class="comment">// 当折线上两点经度几乎相同时（存在一定误差）</span></span><br><span class="line">        pointLng = curPt.lng</span><br><span class="line">        pointLat = point.lat</span><br><span class="line">        <span class="comment">// 创建生成点对象</span></span><br><span class="line">        <span class="keyword">return</span> &#123; pointLng, pointLat &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (precisionLat &lt; <span class="number">2e-6</span> &amp;&amp; precisionLat &gt; <span class="number">-2e-6</span>) &#123;</span><br><span class="line">        <span class="comment">// 当折线上两点纬度相同时（存在一定误差）</span></span><br><span class="line">        pointLat = curPt.lat</span><br><span class="line">        pointLng = point.lng</span><br><span class="line">        <span class="keyword">return</span> &#123; pointLng, pointLat &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他情况，求得点到折线的垂足坐标</span></span><br><span class="line">    <span class="keyword">const</span> k = (nextPt.lat - curPt.lat) / (nextPt.lng - curPt.lng)</span><br><span class="line">    <span class="comment">// 求得该点到线段的垂足坐标</span></span><br><span class="line">    <span class="comment">// 设线段的两端点为 pt1 和 pt2，斜率为：k = (pt2.y - pt1.y) / (pt2.x - pt1.x);</span></span><br><span class="line">    <span class="comment">// 该直线方程为：y = k * (x - pt1.x) + pt1.y。其垂线的斜率为 - 1 / k，</span></span><br><span class="line">    <span class="comment">// 垂线方程为：y = (-1 / k) * (x - point.x) + point.y</span></span><br><span class="line">    <span class="keyword">const</span> pointLng2 = (k * k * curPt.lng + k * (point.lat - curPt.lat) + point.lng) / (k * k + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> pointLat2 = k * (pointLng2 - curPt.lng) + curPt.lat</span><br><span class="line">    <span class="keyword">return</span> &#123; pointLng2, pointLat2 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断点在一定误差范围内是否在折线上</span></span><br><span class="line"><span class="comment"> * @param point 鼠标点</span></span><br><span class="line"><span class="comment"> * @param polygon 区域多边形对象</span></span><br><span class="line"><span class="comment"> * @param precision 误差范围, 默认 2e-4</span></span><br><span class="line"><span class="comment"> * @returns 如果判断点不在折线上则返回false,否则返回true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPointOnPloyline</span>(<span class="params">point, polygon, precision = <span class="number">2e-4</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先判断点是否在线的外包矩形内，如果在，则进一步判断，否则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (!isPointInRect(point, polygon.getBounds())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> distances = [] <span class="comment">// 点到折线每相邻两点的最短距离</span></span><br><span class="line">    <span class="keyword">const</span> pts = polygon.getPath() <span class="comment">// 折线路径点数组</span></span><br><span class="line">    pts.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">        distances.push(getPoToLineDis(point, pts[i], pts[i + <span class="number">1</span>]))</span><br><span class="line">        distances.sort()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minDistance = distances[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (minDistance &lt; precision &amp;&amp; minDistance &gt; -precision) &#123;</span><br><span class="line">        <span class="comment">// 当最短距离小于误差值时，判断鼠标点在折线上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果点到折线最短距离在误差范围内，则得到离该点最近的折线点坐标，否则返回鼠标点坐标</span></span><br><span class="line"><span class="comment"> * @param point 鼠标点</span></span><br><span class="line"><span class="comment"> * @param polygon 区域多边形对象</span></span><br><span class="line"><span class="comment"> * @param precision 误差，默认 2e-4</span></span><br><span class="line"><span class="comment"> * @returns 如果判断点不在折线上则返回该点（point），如果判断点在折线上则返回计算出的折线最近点（</span></span><br><span class="line"><span class="comment"> * 因为鼠标点选很难精确点在折线上，要允许一定误差，故需得到一个折线上的最近点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genMinDisPoint</span>(<span class="params">point, polygon, precision</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPointInRect(point, polygon.getBounds())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> curPt, nextPt</span><br><span class="line">    <span class="keyword">const</span> distances = [] <span class="comment">// 点到折线每相邻两点的最短距离</span></span><br><span class="line">    <span class="keyword">const</span> points = [] <span class="comment">// 折线相邻点</span></span><br><span class="line">    <span class="keyword">const</span> pts = polygon.getPath() <span class="comment">// 折线路径点数组</span></span><br><span class="line">    pts.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</span><br><span class="line">        curPt = pts[i]</span><br><span class="line">        nextPt = pts[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> distance = getPoToLineDis(point, curPt, nextPt)</span><br><span class="line">        <span class="comment">// 先将存储最短距离的数组排序，如果该两个相邻点与鼠标点计算出的最短距离与数组中最小距离相等，则存储该两点</span></span><br><span class="line">        distances.push(distance)</span><br><span class="line">        distances.sort()</span><br><span class="line">        <span class="keyword">if</span> (distance === distances[<span class="number">0</span>]) &#123;</span><br><span class="line">            points.concat([curPt, nextPt])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得 points 最后两项，即最短距离最小时鼠标点两侧的折线点</span></span><br><span class="line">    curPt = points[points.length - <span class="number">2</span>]</span><br><span class="line">    nextPt = points[points.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> minDistance = distances[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (minDistance &lt; precision &amp;&amp; minDistance &gt; -precision) &#123;</span><br><span class="line">        <span class="comment">// 当最短距离小于误差值时，判断鼠标点在折线上，通过鼠标点和两侧相邻点，得到折线上的最近点</span></span><br><span class="line">        <span class="keyword">return</span> genPointOnPolyline(point, curPt, nextPt)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一番，终于解决了缺陷，能够正常判断点是否在折线上，并生成构建自定义区域及一个闭合区域所需要的最近折线点。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以发现随着缺陷的不断解决，代码量却越来越多。毫无疑问，保持代码整洁，简化实现逻辑是一名开发人员应有的意识。不过在过度简化实现逻辑的过程中，我们是否会忽略许多用户实际使用时将会遭遇的错误呢。</p><p>回顾该功能跌宕的开发流程，就会发现：</p><ul><li>如果折线不是一个闭合空间，而仅仅是较少点组成的几段线段时，三角形面积的算法遇见的缺陷没有出现的机会，将是最适合的算法。</li><li>如果折线点较多，但是其中不存在经度或纬度几乎相等的相邻点时，百度提供的算法又将是最适合的算法。</li><li>如果折线点较多，且情况复杂时，采用最后“较重”的算法，才能避免缺陷，成为一枚正常运转的齿轮。</li></ul><p>所以“因地制宜”是一种非常重要的思想，不同的数据结构有不同的优劣势，同样不能因为怕某种框架太“轻”，覆盖面窄就避免使用，也不能因为框架太“重”就回避它。整日争辩哪种技术最好是没有意义的，我们需要做的是了解一种技术的最适使用场景，遇见该场景时使用它，享受技术开发者奉献给使用者的那份便捷。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高德地图开发中的一个问题解决小记&lt;br&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://honoka.me/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="LBS" scheme="http://honoka.me/tags/LBS/"/>
    
  </entry>
  
</feed>
